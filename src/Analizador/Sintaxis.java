
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 03 06:19:13 COT 2021
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 03 06:19:13 COT 2021
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\011\000\002\002" +
    "\011\000\002\002\010\000\002\002\010\000\002\002\010" +
    "\000\002\002\007\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\005\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\004\005\000\002\004\007\000\002\004\012\000\002" +
    "\004\011\000\002\004\007\000\002\004\011\000\002\004" +
    "\006\000\002\004\006\000\002\004\010\000\002\004\010" +
    "\000\002\004\011\000\002\004\011\000\002\004\005\000" +
    "\002\004\011\000\002\004\011\000\002\004\006\000\002" +
    "\004\006\000\002\004\005\000\002\004\011\000\002\004" +
    "\011\000\002\004\006\000\002\004\006\000\002\004\005" +
    "\000\002\004\011\000\002\004\011\000\002\004\006\000" +
    "\002\004\006\000\002\004\010\000\002\004\010\000\002" +
    "\004\011\000\002\004\011\000\002\006\011\000\002\013" +
    "\005\000\002\013\005\000\002\013\006\000\002\013\007" +
    "\000\002\013\005\000\002\013\005\000\002\013\006\000" +
    "\002\013\007\000\002\013\005\000\002\013\005\000\002" +
    "\013\006\000\002\013\007\000\002\013\005\000\002\013" +
    "\005\000\002\013\006\000\002\013\007\000\002\013\005" +
    "\000\002\013\005\000\002\013\006\000\002\013\007\000" +
    "\002\013\005\000\002\013\005\000\002\013\006\000\002" +
    "\013\007\000\002\013\005\000\002\013\005\000\002\013" +
    "\006\000\002\013\007\000\002\013\005\000\002\013\005" +
    "\000\002\013\006\000\002\013\007\000\002\013\005\000" +
    "\002\013\005\000\002\013\006\000\002\013\007\000\002" +
    "\013\005\000\002\013\005\000\002\013\006\000\002\013" +
    "\007\000\002\007\015\000\002\010\011\000\002\011\013" +
    "\000\002\012\011\000\002\014\012\000\002\014\011\000" +
    "\002\005\005\000\002\005\004\000\002\005\004\000\002" +
    "\015\010\000\002\020\003\000\002\016\010\000\002\017" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0122\000\010\016\004\066\005\071\006\001\002\000" +
    "\004\071\u011e\001\002\000\004\071\u0117\001\002\000\004" +
    "\060\011\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\004\061\012\001\002\000\004\062\013" +
    "\001\002\000\032\006\033\011\035\012\015\015\030\016" +
    "\014\017\022\020\027\021\032\022\031\063\024\067\034" +
    "\070\037\001\002\000\006\047\u0100\074\u0101\001\002\000" +
    "\004\060\345\001\002\000\034\006\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\063\ufff3\067\ufff3\070\ufff3\001\002\000\034\006\uffec" +
    "\010\uffec\011\uffec\012\uffec\015\uffec\016\uffec\017\uffec\020" +
    "\uffec\021\uffec\022\uffec\063\uffec\067\uffec\070\uffec\001\002" +
    "\000\034\006\ufff9\010\ufff9\011\ufff9\012\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\063\ufff9\067\ufff9" +
    "\070\ufff9\001\002\000\034\006\033\010\171\011\035\012" +
    "\015\015\030\016\014\017\022\020\027\021\032\022\031" +
    "\063\344\067\034\070\037\001\002\000\006\047\324\074" +
    "\323\001\002\000\034\006\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\063" +
    "\ufff7\067\ufff7\070\ufff7\001\002\000\004\002\ufffb\001\002" +
    "\000\034\006\uffee\010\uffee\011\uffee\012\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\063\uffee\067\uffee" +
    "\070\uffee\001\002\000\034\006\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\063\ufff5\067\ufff5\070\ufff5\001\002\000\006\047\303\074" +
    "\302\001\002\000\004\074\263\001\002\000\006\047\242" +
    "\074\243\001\002\000\004\074\223\001\002\000\004\060" +
    "\211\001\002\000\004\060\204\001\002\000\004\060\045" +
    "\001\002\000\034\006\ufff0\010\ufff0\011\ufff0\012\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\063\ufff0" +
    "\067\ufff0\070\ufff0\001\002\000\004\060\040\001\002\000" +
    "\004\005\041\001\002\000\004\005\042\001\002\000\004" +
    "\061\043\001\002\000\004\072\044\001\002\000\034\006" +
    "\uff98\010\uff98\011\uff98\012\uff98\015\uff98\016\uff98\017\uff98" +
    "\020\uff98\021\uff98\022\uff98\063\uff98\067\uff98\070\uff98\001" +
    "\002\000\004\074\047\001\002\000\004\061\156\001\002" +
    "\000\026\031\057\032\051\033\052\034\056\035\061\036" +
    "\053\037\050\040\055\042\054\043\060\001\002\000\010" +
    "\005\151\074\152\075\150\001\002\000\010\005\143\074" +
    "\144\075\142\001\002\000\010\005\135\074\136\075\134" +
    "\001\002\000\010\005\127\074\130\075\126\001\002\000" +
    "\010\005\121\074\122\075\120\001\002\000\010\005\113" +
    "\074\114\075\112\001\002\000\010\005\105\074\106\075" +
    "\104\001\002\000\010\005\077\074\100\075\076\001\002" +
    "\000\010\005\071\074\072\075\070\001\002\000\010\005" +
    "\063\074\064\075\062\001\002\000\006\061\uffc3\072\uffc3" +
    "\001\002\000\006\005\065\074\066\001\002\000\006\061" +
    "\uffc2\072\uffc2\001\002\000\006\061\uffc1\072\uffc1\001\002" +
    "\000\004\005\067\001\002\000\006\061\uffc0\072\uffc0\001" +
    "\002\000\006\061\uffbf\072\uffbf\001\002\000\006\005\073" +
    "\074\074\001\002\000\006\061\uffbe\072\uffbe\001\002\000" +
    "\006\061\uffbd\072\uffbd\001\002\000\004\005\075\001\002" +
    "\000\006\061\uffbc\072\uffbc\001\002\000\006\061\uffcb\072" +
    "\uffcb\001\002\000\006\005\101\074\102\001\002\000\006" +
    "\061\uffca\072\uffca\001\002\000\006\061\uffc9\072\uffc9\001" +
    "\002\000\004\005\103\001\002\000\006\061\uffc8\072\uffc8" +
    "\001\002\000\006\061\uffbb\072\uffbb\001\002\000\006\005" +
    "\107\074\110\001\002\000\006\061\uffba\072\uffba\001\002" +
    "\000\006\061\uffb9\072\uffb9\001\002\000\004\005\111\001" +
    "\002\000\006\061\uffb8\072\uffb8\001\002\000\006\061\uffab" +
    "\072\uffab\001\002\000\006\005\115\074\116\001\002\000" +
    "\006\061\uffaa\072\uffaa\001\002\000\006\061\uffa9\072\uffa9" +
    "\001\002\000\004\005\117\001\002\000\006\061\uffa8\072" +
    "\uffa8\001\002\000\006\061\uffaf\072\uffaf\001\002\000\006" +
    "\005\123\074\124\001\002\000\006\061\uffae\072\uffae\001" +
    "\002\000\006\061\uffad\072\uffad\001\002\000\004\005\125" +
    "\001\002\000\006\061\uffac\072\uffac\001\002\000\006\061" +
    "\uffb3\072\uffb3\001\002\000\006\005\131\074\132\001\002" +
    "\000\006\061\uffb2\072\uffb2\001\002\000\006\061\uffb1\072" +
    "\uffb1\001\002\000\004\005\133\001\002\000\006\061\uffb0" +
    "\072\uffb0\001\002\000\006\061\uffb7\072\uffb7\001\002\000" +
    "\006\005\137\074\140\001\002\000\006\061\uffb6\072\uffb6" +
    "\001\002\000\006\061\uffb5\072\uffb5\001\002\000\004\005" +
    "\141\001\002\000\006\061\uffb4\072\uffb4\001\002\000\006" +
    "\061\uffc7\072\uffc7\001\002\000\006\005\145\074\146\001" +
    "\002\000\006\061\uffc6\072\uffc6\001\002\000\006\061\uffc5" +
    "\072\uffc5\001\002\000\004\005\147\001\002\000\006\061" +
    "\uffc4\072\uffc4\001\002\000\006\061\uffa7\072\uffa7\001\002" +
    "\000\006\005\153\074\154\001\002\000\006\061\uffa6\072" +
    "\uffa6\001\002\000\006\061\uffa5\072\uffa5\001\002\000\004" +
    "\005\155\001\002\000\006\061\uffa4\072\uffa4\001\002\000" +
    "\004\062\157\001\002\000\030\006\033\011\035\012\015" +
    "\015\030\016\014\017\022\020\027\021\032\022\031\067" +
    "\034\070\037\001\002\000\034\006\033\010\171\011\035" +
    "\012\015\015\030\016\014\017\022\020\027\021\032\022" +
    "\031\063\166\067\034\070\037\001\002\000\034\006\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\015\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\063\ufff4\067\ufff4\070\ufff4\001\002" +
    "\000\034\006\uffed\010\uffed\011\uffed\012\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\021\uffed\022\uffed\063\uffed\067\uffed" +
    "\070\uffed\001\002\000\034\006\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\063\ufffa\067\ufffa\070\ufffa\001\002\000\034\006\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\063\ufff8\067\ufff8\070\ufff8\001\002\000" +
    "\034\006\uffef\010\uffef\011\uffef\012\uffef\015\uffef\016\uffef" +
    "\017\uffef\020\uffef\021\uffef\022\uffef\063\uffef\067\uffef\070" +
    "\uffef\001\002\000\034\006\uffa2\010\uffa2\011\uffa2\012\uffa2" +
    "\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\063" +
    "\uffa2\067\uffa2\070\uffa2\001\002\000\034\006\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021" +
    "\ufff6\022\ufff6\063\ufff6\067\ufff6\070\ufff6\001\002\000\004" +
    "\010\171\001\002\000\004\062\173\001\002\000\034\006" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\063\ufff1\067\ufff1\070\ufff1\001" +
    "\002\000\030\006\033\011\035\012\015\015\030\016\014" +
    "\017\022\020\027\021\032\022\031\067\034\070\037\001" +
    "\002\000\034\006\033\010\171\011\035\012\015\015\030" +
    "\016\014\017\022\020\027\021\032\022\031\063\175\067" +
    "\034\070\037\001\002\000\004\011\176\001\002\000\004" +
    "\060\177\001\002\000\004\074\047\001\002\000\004\061" +
    "\201\001\002\000\004\072\202\001\002\000\034\006\uffa1" +
    "\010\uffa1\011\uffa1\012\uffa1\015\uffa1\016\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\063\uffa1\067\uffa1\070\uffa1\001\002" +
    "\000\034\006\ufff2\010\ufff2\011\ufff2\012\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\063\ufff2\067\ufff2" +
    "\070\ufff2\001\002\000\004\005\205\001\002\000\004\005" +
    "\206\001\002\000\004\061\207\001\002\000\004\072\210" +
    "\001\002\000\034\006\uff9a\010\uff9a\011\uff9a\012\uff9a\015" +
    "\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\063\uff9a" +
    "\067\uff9a\070\uff9a\001\002\000\004\074\047\001\002\000" +
    "\004\061\213\001\002\000\004\062\214\001\002\000\030" +
    "\006\033\011\035\012\015\015\030\016\014\017\022\020" +
    "\027\021\032\022\031\067\034\070\037\001\002\000\034" +
    "\006\033\010\171\011\035\012\015\015\030\016\014\017" +
    "\022\020\027\021\032\022\031\063\216\067\034\070\037" +
    "\001\002\000\036\006\uffcc\007\217\010\uffcc\011\uffcc\012" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\063\uffcc\067\uffcc\070\uffcc\001\002\000\004\062\220\001" +
    "\002\000\030\006\033\011\035\012\015\015\030\016\014" +
    "\017\022\020\027\021\032\022\031\067\034\070\037\001" +
    "\002\000\034\006\033\010\171\011\035\012\015\015\030" +
    "\016\014\017\022\020\027\021\032\022\031\063\222\067" +
    "\034\070\037\001\002\000\034\006\uffa3\010\uffa3\011\uffa3" +
    "\012\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022" +
    "\uffa3\063\uffa3\067\uffa3\070\uffa3\001\002\000\006\024\225" +
    "\046\224\001\002\000\004\005\234\001\002\000\004\005" +
    "\226\001\002\000\006\005\227\074\230\001\002\000\004" +
    "\072\233\001\002\000\004\005\231\001\002\000\004\072" +
    "\232\001\002\000\034\006\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\063" +
    "\uffcd\067\uffcd\070\uffcd\001\002\000\034\006\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\063\uffcf\067\uffcf\070\uffcf\001\002\000\006" +
    "\005\235\074\236\001\002\000\004\072\241\001\002\000" +
    "\004\005\237\001\002\000\004\072\240\001\002\000\034" +
    "\006\uffce\010\uffce\011\uffce\012\uffce\015\uffce\016\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\063\uffce\067\uffce\070\uffce" +
    "\001\002\000\034\006\uffd0\010\uffd0\011\uffd0\012\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\063\uffd0" +
    "\067\uffd0\070\uffd0\001\002\000\004\074\261\001\002\000" +
    "\012\024\247\046\244\047\246\072\245\001\002\000\004" +
    "\075\255\001\002\000\034\006\uffd5\010\uffd5\011\uffd5\012" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\063\uffd5\067\uffd5\070\uffd5\001\002\000\004\072\254\001" +
    "\002\000\004\075\250\001\002\000\004\073\251\001\002" +
    "\000\004\075\252\001\002\000\004\072\253\001\002\000" +
    "\034\006\uffd3\010\uffd3\011\uffd3\012\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\063\uffd3\067\uffd3\070" +
    "\uffd3\001\002\000\034\006\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\063" +
    "\uffd2\067\uffd2\070\uffd2\001\002\000\004\073\256\001\002" +
    "\000\004\075\257\001\002\000\004\072\260\001\002\000" +
    "\034\006\uffd4\010\uffd4\011\uffd4\012\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\063\uffd4\067\uffd4\070" +
    "\uffd4\001\002\000\004\072\262\001\002\000\034\006\uffd1" +
    "\010\uffd1\011\uffd1\012\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\063\uffd1\067\uffd1\070\uffd1\001\002" +
    "\000\006\024\265\046\264\001\002\000\004\005\274\001" +
    "\002\000\004\005\266\001\002\000\006\005\267\074\270" +
    "\001\002\000\004\072\273\001\002\000\004\005\271\001" +
    "\002\000\004\072\272\001\002\000\034\006\uffe0\010\uffe0" +
    "\011\uffe0\012\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\063\uffe0\067\uffe0\070\uffe0\001\002\000\034" +
    "\006\uffe2\010\uffe2\011\uffe2\012\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\063\uffe2\067\uffe2\070\uffe2" +
    "\001\002\000\006\005\275\074\276\001\002\000\004\072" +
    "\301\001\002\000\004\005\277\001\002\000\004\072\300" +
    "\001\002\000\034\006\uffe1\010\uffe1\011\uffe1\012\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\063\uffe1" +
    "\067\uffe1\070\uffe1\001\002\000\034\006\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\063\uffe3\067\uffe3\070\uffe3\001\002\000\012\024" +
    "\311\046\306\047\310\072\307\001\002\000\004\074\304" +
    "\001\002\000\004\072\305\001\002\000\034\006\uffd6\010" +
    "\uffd6\011\uffd6\012\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\063\uffd6\067\uffd6\070\uffd6\001\002\000" +
    "\004\075\317\001\002\000\034\006\uffda\010\uffda\011\uffda" +
    "\012\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\063\uffda\067\uffda\070\uffda\001\002\000\004\072\316" +
    "\001\002\000\004\075\312\001\002\000\004\073\313\001" +
    "\002\000\004\075\314\001\002\000\004\072\315\001\002" +
    "\000\034\006\uffd8\010\uffd8\011\uffd8\012\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\063\uffd8\067\uffd8" +
    "\070\uffd8\001\002\000\034\006\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\063\uffd7\067\uffd7\070\uffd7\001\002\000\004\073\320\001" +
    "\002\000\004\075\321\001\002\000\004\072\322\001\002" +
    "\000\034\006\uffd9\010\uffd9\011\uffd9\012\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\063\uffd9\067\uffd9" +
    "\070\uffd9\001\002\000\012\024\332\046\327\047\331\072" +
    "\330\001\002\000\004\074\325\001\002\000\004\072\326" +
    "\001\002\000\034\006\uffdb\010\uffdb\011\uffdb\012\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\063\uffdb" +
    "\067\uffdb\070\uffdb\001\002\000\004\075\340\001\002\000" +
    "\034\006\uffdf\010\uffdf\011\uffdf\012\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\063\uffdf\067\uffdf\070" +
    "\uffdf\001\002\000\004\072\337\001\002\000\004\075\333" +
    "\001\002\000\004\073\334\001\002\000\004\075\335\001" +
    "\002\000\004\072\336\001\002\000\034\006\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\063\uffdd\067\uffdd\070\uffdd\001\002\000\034" +
    "\006\uffdc\010\uffdc\011\uffdc\012\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\063\uffdc\067\uffdc\070\uffdc" +
    "\001\002\000\004\073\341\001\002\000\004\075\342\001" +
    "\002\000\004\072\343\001\002\000\034\006\uffde\010\uffde" +
    "\011\uffde\012\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\063\uffde\067\uffde\070\uffde\001\002\000\004" +
    "\002\ufffe\001\002\000\006\016\347\074\350\001\002\000" +
    "\004\061\374\001\002\000\004\074\365\001\002\000\004" +
    "\024\351\001\002\000\004\075\352\001\002\000\004\072" +
    "\353\001\002\000\004\074\047\001\002\000\004\072\355" +
    "\001\002\000\006\047\357\074\360\001\002\000\004\061" +
    "\uff9e\001\002\000\004\074\364\001\002\000\006\046\361" +
    "\047\362\001\002\000\004\075\363\001\002\000\004\061" +
    "\uff9c\001\002\000\004\061\uff9d\001\002\000\004\061\uff9b" +
    "\001\002\000\004\024\366\001\002\000\004\075\367\001" +
    "\002\000\004\072\370\001\002\000\004\074\047\001\002" +
    "\000\004\072\372\001\002\000\006\047\357\074\360\001" +
    "\002\000\004\061\uff9f\001\002\000\004\062\375\001\002" +
    "\000\030\006\033\011\035\012\015\015\030\016\014\017" +
    "\022\020\027\021\032\022\031\067\034\070\037\001\002" +
    "\000\034\006\033\010\171\011\035\012\015\015\030\016" +
    "\014\017\022\020\027\021\032\022\031\063\377\067\034" +
    "\070\037\001\002\000\034\006\uffa0\010\uffa0\011\uffa0\012" +
    "\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0" +
    "\063\uffa0\067\uffa0\070\uffa0\001\002\000\004\074\u0115\001" +
    "\002\000\012\024\u0105\046\u0102\047\u0104\072\u0103\001\002" +
    "\000\004\075\u010c\001\002\000\034\006\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\063\uffeb\067\uffeb\070\uffeb\001\002\000\004\072" +
    "\u010b\001\002\000\004\075\u0106\001\002\000\006\072\u0107" +
    "\073\u0108\001\002\000\034\006\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\063\uffe7\067\uffe7\070\uffe7\001\002\000\004\075\u0109\001" +
    "\002\000\004\072\u010a\001\002\000\034\006\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\063\uffe6\067\uffe6\070\uffe6\001\002\000\034" +
    "\006\uffe5\010\uffe5\011\uffe5\012\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\063\uffe5\067\uffe5\070\uffe5" +
    "\001\002\000\010\072\u010d\073\u010e\074\u010f\001\002\000" +
    "\034\006\uffea\010\uffea\011\uffea\012\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\063\uffea\067\uffea\070" +
    "\uffea\001\002\000\004\075\u0113\001\002\000\004\046\u0110" +
    "\001\002\000\004\075\u0111\001\002\000\004\072\u0112\001" +
    "\002\000\034\006\uffe9\010\uffe9\011\uffe9\012\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\063\uffe9\067" +
    "\uffe9\070\uffe9\001\002\000\004\072\u0114\001\002\000\034" +
    "\006\uffe8\010\uffe8\011\uffe8\012\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\063\uffe8\067\uffe8\070\uffe8" +
    "\001\002\000\004\072\u0116\001\002\000\034\006\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\063\uffe4\067\uffe4\070\uffe4\001\002\000" +
    "\004\060\u0118\001\002\000\004\061\u0119\001\002\000\004" +
    "\062\u011a\001\002\000\032\006\033\011\035\012\015\015" +
    "\030\016\014\017\022\020\027\021\032\022\031\063\u011c" +
    "\067\034\070\037\001\002\000\034\006\033\010\171\011" +
    "\035\012\015\015\030\016\014\017\022\020\027\021\032" +
    "\022\031\063\u011d\067\034\070\037\001\002\000\004\002" +
    "\ufffc\001\002\000\004\002\uffff\001\002\000\004\060\u011f" +
    "\001\002\000\004\061\u0120\001\002\000\004\062\u0121\001" +
    "\002\000\032\006\033\011\035\012\015\015\030\016\014" +
    "\017\022\020\027\021\032\022\031\063\u0123\067\034\070" +
    "\037\001\002\000\034\006\033\010\171\011\035\012\015" +
    "\015\030\016\014\017\022\020\027\021\032\022\031\063" +
    "\u0124\067\034\070\037\001\002\000\004\002\ufffd\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0122\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\020\004\017\006\022\007\025\010\015\012\035\015\024" +
    "\016\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\162\006\163\007\166\010\160\011\167\012\171\015" +
    "\164\016\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\157\004\017\006\022\007\025\010" +
    "\015\012\035\015\024\016\016\001\001\000\022\004\162" +
    "\006\163\007\166\010\160\011\167\012\171\015\164\016" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\173\004\017\006" +
    "\022\007\025\010\015\012\035\015\024\016\016\001\001" +
    "\000\022\004\162\006\163\007\166\010\160\011\167\012" +
    "\171\015\164\016\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\214\004\017\006" +
    "\022\007\025\010\015\012\035\015\024\016\016\001\001" +
    "\000\022\004\162\006\163\007\166\010\160\011\167\012" +
    "\171\015\164\016\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\220\004\017\006\022\007\025\010" +
    "\015\012\035\015\024\016\016\001\001\000\022\004\162" +
    "\006\163\007\166\010\160\011\167\012\171\015\164\016" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\345\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\353\001\001\000\002\001\001\000\004\005\355\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\370\001\001\000\002\001\001\000\004" +
    "\005\372\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\375\004\017\006\022\007\025\010\015\012\035" +
    "\015\024\016\016\001\001\000\022\004\162\006\163\007" +
    "\166\010\160\011\167\012\171\015\164\016\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\u011a\004\017\006\022\007" +
    "\025\010\015\012\035\015\024\016\016\001\001\000\022" +
    "\004\162\006\163\007\166\010\160\011\167\012\171\015" +
    "\164\016\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\u0121\004\017\006\022\007\025\010\015\012\035" +
    "\015\024\016\016\001\001\000\022\004\162\006\163\007" +
    "\166\010\160\011\167\012\171\015\164\016\161\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA_SCANF ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SCANF",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SCANF ::= Scanf Parent_a Comillas Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA_PRINTF ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PRINTF ::= Printf Parent_a Comillas Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA_FOR ::= T_int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_BOOLEANA ::= Identificador Op_menorE Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA_BOOLEANA ::= Identificador Op_menorE Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_BOOLEANA ::= Identificador Op_menorE Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_BOOLEANA ::= Identificador Op_menorE Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_BOOLEANA ::= Identificador Op_mayorE Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_BOOLEANA ::= Identificador Op_mayorE Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_BOOLEANA ::= Identificador Op_mayorE Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_BOOLEANA ::= Identificador Op_mayorE Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_BOOLEANA ::= Identificador Op_orB Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_BOOLEANA ::= Identificador Op_orB Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_BOOLEANA ::= Identificador Op_orB Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_BOOLEANA ::= Identificador Op_orB Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_BOOLEANA ::= Identificador Op_and Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_BOOLEANA ::= Identificador Op_and Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_BOOLEANA ::= Identificador Op_and Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_BOOLEANA ::= Identificador Op_and Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_BOOLEANA ::= Identificador Op_menor Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_BOOLEANA ::= Identificador Op_menor Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_BOOLEANA ::= Identificador Op_menor Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_BOOLEANA ::= Identificador Op_menor Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_BOOLEANA ::= Identificador Op_mayor Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_BOOLEANA ::= Identificador Op_mayor Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_BOOLEANA ::= Identificador Op_mayor Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_BOOLEANA ::= Identificador Op_mayor Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_BOOLEANA ::= Identificador Op_andB Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_BOOLEANA ::= Identificador Op_andB Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_BOOLEANA ::= Identificador Op_andB Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_BOOLEANA ::= Identificador Op_andB Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_BOOLEANA ::= Identificador Op_or Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_BOOLEANA ::= Identificador Op_or Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_BOOLEANA ::= Identificador Op_or Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_BOOLEANA ::= Identificador Op_or Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_BOOLEANA ::= Identificador Op_diferente Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_BOOLEANA ::= Identificador Op_diferente Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_BOOLEANA ::= Identificador Op_diferente Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_BOOLEANA ::= Identificador Op_diferente Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_BOOLEANA ::= Identificador Op_igual Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_BOOLEANA ::= Identificador Op_igual Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOLEANA ::= Identificador Op_igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_BOOLEANA ::= Identificador Op_igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= T_char Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= T_char Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= T_char Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= T_char Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= T_float Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= T_float Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= T_float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= T_float Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= T_float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= T_long Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= T_long Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= T_long Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= T_long Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= T_long Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= T_double Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= T_double Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= T_double Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= T_double Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= T_double Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= T_int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= T_int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= T_int Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= T_int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= T_int Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= T_int Identificador Op_atribucion Numero Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= T_int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= T_int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Void Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= T_int Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Void Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= T_int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

