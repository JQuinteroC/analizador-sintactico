
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 17 17:06:25 COT 2021
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 17 17:06:25 COT 2021
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\010\006\000\002\010" +
    "\006\000\002\010\010\000\002\010\006\000\002\010\012" +
    "\000\002\010\012\000\002\010\014\000\002\010\012\000" +
    "\002\010\014\000\002\010\014\000\002\010\016\000\002" +
    "\010\016\000\002\010\017\000\002\010\020\000\002\010" +
    "\022\000\002\002\011\000\002\002\010\000\002\002\010" +
    "\000\002\002\007\000\002\002\011\000\002\002\010\000" +
    "\002\002\014\000\002\002\013\000\002\002\014\000\002" +
    "\002\012\000\002\002\011\000\002\002\011\000\002\002" +
    "\010\000\002\002\012\000\002\002\011\000\002\002\015" +
    "\000\002\002\014\000\002\002\015\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\005\000\002\003\004\000\002\003\003" +
    "\000\002\004\005\000\002\004\007\000\002\004\006\000" +
    "\002\004\010\000\002\004\010\000\002\004\012\000\002" +
    "\004\005\000\002\004\011\000\002\004\005\000\002\004" +
    "\010\000\002\004\011\000\002\004\005\000\002\004\010" +
    "\000\002\004\011\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\020\003\000\002\020\003\000\002" +
    "\006\011\000\002\015\003\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\006\000\002\015\007" +
    "\000\002\022\003\000\002\022\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\007\015" +
    "\000\002\012\011\000\002\013\013\000\002\014\011\000" +
    "\002\016\012\000\002\016\011\000\002\005\005\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\014\016\005\075\004\076\010\077\007\110" +
    "\012\001\002\000\004\076\u0108\001\002\000\004\076\366" +
    "\001\002\000\010\016\325\075\324\076\326\001\002\000" +
    "\004\100\321\001\002\000\004\067\076\001\002\000\004" +
    "\002\075\001\002\000\004\034\013\001\002\000\006\101" +
    "\015\103\014\001\002\000\006\035\023\061\024\001\002" +
    "\000\004\035\016\001\002\000\012\016\000\075\000\076" +
    "\000\077\017\001\002\000\004\100\020\001\002\000\004" +
    "\102\021\001\002\000\004\060\022\001\002\000\010\016" +
    "\ufffc\075\ufffc\076\ufffc\001\002\000\014\016\uffff\075\uffff" +
    "\076\uffff\077\052\110\053\001\002\000\004\103\025\001" +
    "\002\000\004\035\026\001\002\000\014\016\ufffe\075\ufffe" +
    "\076\ufffe\077\027\110\030\001\002\000\004\100\047\001" +
    "\002\000\004\034\031\001\002\000\004\103\032\001\002" +
    "\000\006\035\033\061\034\001\002\000\012\016\ufff7\075" +
    "\ufff7\076\ufff7\077\043\001\002\000\004\103\035\001\002" +
    "\000\004\035\036\001\002\000\012\016\ufff6\075\ufff6\076" +
    "\ufff6\077\037\001\002\000\004\100\040\001\002\000\004" +
    "\102\041\001\002\000\004\060\042\001\002\000\010\016" +
    "\ufff2\075\ufff2\076\ufff2\001\002\000\004\100\044\001\002" +
    "\000\004\102\045\001\002\000\004\060\046\001\002\000" +
    "\010\016\ufff3\075\ufff3\076\ufff3\001\002\000\004\102\050" +
    "\001\002\000\004\060\051\001\002\000\010\016\ufffa\075" +
    "\ufffa\076\ufffa\001\002\000\004\100\072\001\002\000\004" +
    "\034\054\001\002\000\004\103\055\001\002\000\006\035" +
    "\056\061\057\001\002\000\012\016\ufff9\075\ufff9\076\ufff9" +
    "\077\066\001\002\000\004\103\060\001\002\000\006\035" +
    "\061\077\062\001\002\000\010\016\ufff8\075\ufff8\076\ufff8" +
    "\001\002\000\004\100\063\001\002\000\004\102\064\001" +
    "\002\000\004\060\065\001\002\000\010\016\ufff4\075\ufff4" +
    "\076\ufff4\001\002\000\004\100\067\001\002\000\004\102" +
    "\070\001\002\000\004\060\071\001\002\000\010\016\ufff5" +
    "\075\ufff5\076\ufff5\001\002\000\004\102\073\001\002\000" +
    "\004\060\074\001\002\000\010\016\ufffb\075\ufffb\076\ufffb" +
    "\001\002\000\004\002\001\001\002\000\004\070\077\001" +
    "\002\000\004\071\100\001\002\000\030\005\120\010\122" +
    "\011\102\015\114\016\101\017\106\020\113\021\116\022" +
    "\115\023\117\072\111\001\002\000\004\103\uffc6\001\002" +
    "\000\004\067\263\001\002\000\032\005\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\072\uffd8\001\002\000\032\005\uffde\007" +
    "\uffde\010\uffde\011\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\072\uffde\001\002\000\032\005" +
    "\120\007\165\010\122\011\102\015\114\016\101\017\106" +
    "\020\113\021\116\022\115\023\117\072\262\001\002\000" +
    "\004\103\uffc2\001\002\000\004\103\243\001\002\000\032" +
    "\005\uffdc\007\uffdc\010\uffdc\011\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\072\uffdc\001\002" +
    "\000\004\002\uffee\001\002\000\032\005\uffda\007\uffda\010" +
    "\uffda\011\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\072\uffda\001\002\000\004\103\uffc5\001" +
    "\002\000\004\103\232\001\002\000\004\103\uffc3\001\002" +
    "\000\004\103\221\001\002\000\004\103\uffc4\001\002\000" +
    "\004\067\207\001\002\000\004\103\200\001\002\000\004" +
    "\067\124\001\002\000\032\005\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\072\uffd5\001\002\000\010\045\130\046\126\103" +
    "\131\001\002\000\006\060\uffc0\070\uffc0\001\002\000\006" +
    "\060\uffba\070\uffba\001\002\000\004\070\154\001\002\000" +
    "\006\060\uffb9\070\uffb9\001\002\000\026\032\141\033\133" +
    "\034\134\035\137\036\144\037\135\040\132\041\140\042" +
    "\136\043\143\001\002\000\014\045\uffb2\046\uffb2\063\uffb2" +
    "\103\uffb2\112\uffb2\001\002\000\014\045\uffb7\046\uffb7\063" +
    "\uffb7\103\uffb7\112\uffb7\001\002\000\014\045\uffb4\046\uffb4" +
    "\063\uffb4\103\uffb4\112\uffb4\001\002\000\014\045\uffb6\046" +
    "\uffb6\063\uffb6\103\uffb6\112\uffb6\001\002\000\014\045\uffb0" +
    "\046\uffb0\063\uffb0\103\uffb0\112\uffb0\001\002\000\014\045" +
    "\uffb3\046\uffb3\063\uffb3\103\uffb3\112\uffb3\001\002\000\014" +
    "\045\uffb1\046\uffb1\063\uffb1\103\uffb1\112\uffb1\001\002\000" +
    "\014\045\uffb8\046\uffb8\063\uffb8\103\uffb8\112\uffb8\001\002" +
    "\000\014\045\130\046\126\063\147\103\150\112\145\001" +
    "\002\000\014\045\uffaf\046\uffaf\063\uffaf\103\uffaf\112\uffaf" +
    "\001\002\000\014\045\uffb5\046\uffb5\063\uffb5\103\uffb5\112" +
    "\uffb5\001\002\000\006\060\uffbe\070\uffbe\001\002\000\006" +
    "\060\uffbf\070\uffbf\001\002\000\006\063\151\103\152\001" +
    "\002\000\006\060\uffbd\070\uffbd\001\002\000\006\060\uffbc" +
    "\070\uffbc\001\002\000\004\063\153\001\002\000\006\060" +
    "\uffbb\070\uffbb\001\002\000\004\071\155\001\002\000\026" +
    "\005\120\010\122\011\102\015\114\016\101\017\106\020" +
    "\113\021\116\022\115\023\117\001\002\000\032\005\120" +
    "\007\165\010\122\011\102\015\114\016\101\017\106\020" +
    "\113\021\116\022\115\023\117\072\162\001\002\000\032" +
    "\005\uffd9\007\uffd9\010\uffd9\011\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\072\uffd9\001\002" +
    "\000\032\005\uffdf\007\uffdf\010\uffdf\011\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\072\uffdf" +
    "\001\002\000\032\005\uffdd\007\uffdd\010\uffdd\011\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\072\uffdd\001\002\000\032\005\uffad\007\uffad\010\uffad\011" +
    "\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\023\uffad\072\uffad\001\002\000\032\005\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\072\uffdb\001\002\000\004\007\165\001" +
    "\002\000\004\071\167\001\002\000\032\005\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\072\uffd6\001\002\000\026\005\120" +
    "\010\122\011\102\015\114\016\101\017\106\020\113\021" +
    "\116\022\115\023\117\001\002\000\032\005\120\007\165" +
    "\010\122\011\102\015\114\016\101\017\106\020\113\021" +
    "\116\022\115\023\117\072\171\001\002\000\004\010\172" +
    "\001\002\000\004\067\173\001\002\000\010\045\130\046" +
    "\126\103\131\001\002\000\004\070\175\001\002\000\004" +
    "\060\176\001\002\000\032\005\uffac\007\uffac\010\uffac\011" +
    "\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac" +
    "\023\uffac\072\uffac\001\002\000\032\005\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\072\uffd7\001\002\000\006\024\202\060" +
    "\201\001\002\000\032\005\uffce\007\uffce\010\uffce\011\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\072\uffce\001\002\000\004\112\203\001\002\000\004" +
    "\061\204\001\002\000\004\112\205\001\002\000\004\060" +
    "\206\001\002\000\032\005\uffcd\007\uffcd\010\uffcd\011\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\072\uffcd\001\002\000\010\045\130\046\126\103\131" +
    "\001\002\000\004\070\211\001\002\000\004\071\212\001" +
    "\002\000\026\005\120\010\122\011\102\015\114\016\101" +
    "\017\106\020\113\021\116\022\115\023\117\001\002\000" +
    "\032\005\120\007\165\010\122\011\102\015\114\016\101" +
    "\017\106\020\113\021\116\022\115\023\117\072\214\001" +
    "\002\000\034\005\uffc1\006\215\007\uffc1\010\uffc1\011\uffc1" +
    "\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\072\uffc1\001\002\000\004\071\216\001\002\000\026" +
    "\005\120\010\122\011\102\015\114\016\101\017\106\020" +
    "\113\021\116\022\115\023\117\001\002\000\032\005\120" +
    "\007\165\010\122\011\102\015\114\016\101\017\106\020" +
    "\113\021\116\022\115\023\117\072\220\001\002\000\032" +
    "\005\uffae\007\uffae\010\uffae\011\uffae\015\uffae\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\072\uffae\001\002" +
    "\000\006\024\223\060\222\001\002\000\032\005\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\072\uffc9\001\002\000\004\063" +
    "\224\001\002\000\006\063\225\103\226\001\002\000\004" +
    "\060\231\001\002\000\004\063\227\001\002\000\004\060" +
    "\230\001\002\000\032\005\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\072\uffc7\001\002\000\032\005\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\072\uffc8\001\002\000\006\024\234\060\233" +
    "\001\002\000\032\005\uffcc\007\uffcc\010\uffcc\011\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\072\uffcc\001\002\000\004\063\235\001\002\000\006\063" +
    "\236\103\237\001\002\000\004\060\242\001\002\000\004" +
    "\063\240\001\002\000\004\060\241\001\002\000\032\005" +
    "\uffca\007\uffca\010\uffca\011\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\072\uffca\001\002\000" +
    "\032\005\uffcb\007\uffcb\010\uffcb\011\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\072\uffcb\001" +
    "\002\000\010\024\246\060\244\103\245\001\002\000\032" +
    "\005\uffd4\007\uffd4\010\uffd4\011\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\072\uffd4\001\002" +
    "\000\006\024\257\060\256\001\002\000\004\112\247\001" +
    "\002\000\006\060\250\103\251\001\002\000\032\005\uffd3" +
    "\007\uffd3\010\uffd3\011\uffd3\015\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\072\uffd3\001\002\000\006" +
    "\024\253\060\252\001\002\000\032\005\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\072\uffd1\001\002\000\004\112\254\001" +
    "\002\000\004\060\255\001\002\000\032\005\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\072\uffcf\001\002\000\032\005\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\072\uffd2\001\002\000\004" +
    "\112\260\001\002\000\004\060\261\001\002\000\032\005" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\072\uffd0\001\002\000" +
    "\004\002\uffef\001\002\000\006\016\265\103\266\001\002" +
    "\000\004\070\315\001\002\000\004\103\306\001\002\000" +
    "\004\024\267\001\002\000\004\112\270\001\002\000\004" +
    "\060\271\001\002\000\010\045\130\046\126\103\131\001" +
    "\002\000\004\060\273\001\002\000\010\047\275\050\277" +
    "\103\276\001\002\000\004\070\uffa9\001\002\000\004\103" +
    "\305\001\002\000\010\024\303\047\301\050\302\001\002" +
    "\000\004\103\300\001\002\000\004\070\uffa4\001\002\000" +
    "\004\070\uffa7\001\002\000\004\070\uffa6\001\002\000\004" +
    "\112\304\001\002\000\004\070\uffa8\001\002\000\004\070" +
    "\uffa5\001\002\000\004\024\307\001\002\000\004\112\310" +
    "\001\002\000\004\060\311\001\002\000\010\045\130\046" +
    "\126\103\131\001\002\000\004\060\313\001\002\000\010" +
    "\047\275\050\277\103\276\001\002\000\004\070\uffaa\001" +
    "\002\000\004\071\316\001\002\000\026\005\120\010\122" +
    "\011\102\015\114\016\101\017\106\020\113\021\116\022" +
    "\115\023\117\001\002\000\032\005\120\007\165\010\122" +
    "\011\102\015\114\016\101\017\106\020\113\021\116\022" +
    "\115\023\117\072\320\001\002\000\032\005\uffab\007\uffab" +
    "\010\uffab\011\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\072\uffab\001\002\000\004\102\322" +
    "\001\002\000\004\060\323\001\002\000\010\016\ufffd\075" +
    "\ufffd\076\ufffd\001\002\000\004\076\357\001\002\000\004" +
    "\076\335\001\002\000\004\067\327\001\002\000\004\070" +
    "\330\001\002\000\004\071\331\001\002\000\030\005\120" +
    "\010\122\011\102\015\114\016\101\017\106\020\113\021" +
    "\116\022\115\023\117\072\333\001\002\000\032\005\120" +
    "\007\165\010\122\011\102\015\114\016\101\017\106\020" +
    "\113\021\116\022\115\023\117\072\334\001\002\000\004" +
    "\002\uffe5\001\002\000\004\002\uffe6\001\002\000\004\067" +
    "\336\001\002\000\004\070\337\001\002\000\004\071\340" +
    "\001\002\000\030\005\120\010\122\011\102\015\114\016" +
    "\101\017\106\020\113\021\116\022\115\023\117\072\343" +
    "\001\002\000\032\005\120\007\165\010\122\011\102\015" +
    "\114\016\101\017\106\020\113\021\116\022\115\023\117" +
    "\072\350\001\002\000\004\112\344\001\002\000\004\002" +
    "\uffe3\001\002\000\004\060\345\001\002\000\004\072\346" +
    "\001\002\000\004\002\uffe1\001\002\000\006\103\352\112" +
    "\351\001\002\000\004\002\uffe4\001\002\000\004\060\355" +
    "\001\002\000\004\060\353\001\002\000\004\072\354\001" +
    "\002\000\004\002\uffe0\001\002\000\004\072\356\001\002" +
    "\000\004\002\uffe2\001\002\000\004\067\360\001\002\000" +
    "\004\070\361\001\002\000\004\071\362\001\002\000\030" +
    "\005\120\010\122\011\102\015\114\016\101\017\106\020" +
    "\113\021\116\022\115\023\117\072\364\001\002\000\032" +
    "\005\120\007\165\010\122\011\102\015\114\016\101\017" +
    "\106\020\113\021\116\022\115\023\117\072\365\001\002" +
    "\000\004\002\uffe7\001\002\000\004\002\uffe8\001\002\000" +
    "\004\067\367\001\002\000\004\070\370\001\002\000\004" +
    "\071\371\001\002\000\030\005\120\010\122\011\102\015" +
    "\114\016\101\017\106\020\113\021\116\022\115\023\117" +
    "\072\374\001\002\000\032\005\120\007\165\010\122\011" +
    "\102\015\114\016\101\017\106\020\113\021\116\022\115" +
    "\023\117\072\u0101\001\002\000\004\112\375\001\002\000" +
    "\004\002\uffec\001\002\000\004\060\376\001\002\000\004" +
    "\072\377\001\002\000\004\002\uffea\001\002\000\006\103" +
    "\u0103\112\u0102\001\002\000\004\002\uffed\001\002\000\004" +
    "\060\u0106\001\002\000\004\060\u0104\001\002\000\004\072" +
    "\u0105\001\002\000\004\002\uffe9\001\002\000\004\072\u0107" +
    "\001\002\000\004\002\uffeb\001\002\000\004\067\u0109\001" +
    "\002\000\004\070\u010a\001\002\000\004\071\u010b\001\002" +
    "\000\030\005\120\010\122\011\102\015\114\016\101\017" +
    "\106\020\113\021\116\022\115\023\117\072\u010d\001\002" +
    "\000\032\005\120\007\165\010\122\011\102\015\114\016" +
    "\101\017\106\020\113\021\116\022\115\023\117\072\u010e" +
    "\001\002\000\004\002\ufff0\001\002\000\004\002\ufff1\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\006\002\010\010\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\104\004\103\006\107\007\111" +
    "\012\102\014\122\017\106\020\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\157\006\160\007\162\012\156\013\163\014" +
    "\165\017\106\020\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\126\022\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\155\004\103\006\107\007\111\012" +
    "\102\014\122\017\106\020\120\001\001\000\022\004\157" +
    "\006\160\007\162\012\156\013\163\014\165\017\106\020" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\167\004\103\006\107\007\111\012\102\014\122\017" +
    "\106\020\120\001\001\000\022\004\157\006\160\007\162" +
    "\012\156\013\163\014\165\017\106\020\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\173\022\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\207\022\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\212\004\103\006\107\007\111\012\102\014\122\017\106" +
    "\020\120\001\001\000\022\004\157\006\160\007\162\012" +
    "\156\013\163\014\165\017\106\020\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\216\004\103\006" +
    "\107\007\111\012\102\014\122\017\106\020\120\001\001" +
    "\000\022\004\157\006\160\007\162\012\156\013\163\014" +
    "\165\017\106\020\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\271\022\124\001\001\000" +
    "\002\001\001\000\004\005\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\311" +
    "\022\124\001\001\000\002\001\001\000\004\005\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\316" +
    "\004\103\006\107\007\111\012\102\014\122\017\106\020" +
    "\120\001\001\000\022\004\157\006\160\007\162\012\156" +
    "\013\163\014\165\017\106\020\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\331\004\103" +
    "\006\107\007\111\012\102\014\122\017\106\020\120\001" +
    "\001\000\022\004\157\006\160\007\162\012\156\013\163" +
    "\014\165\017\106\020\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\340\004\103\006\107\007\111\011" +
    "\341\012\102\014\122\017\106\020\120\001\001\000\024" +
    "\004\157\006\160\007\162\011\346\012\156\013\163\014" +
    "\165\017\106\020\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\362\004\103\006" +
    "\107\007\111\012\102\014\122\017\106\020\120\001\001" +
    "\000\022\004\157\006\160\007\162\012\156\013\163\014" +
    "\165\017\106\020\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\371\004\103\006\107\007\111\011\372" +
    "\012\102\014\122\017\106\020\120\001\001\000\024\004" +
    "\157\006\160\007\162\011\377\012\156\013\163\014\165" +
    "\017\106\020\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\u010b\004\103\006\107" +
    "\007\111\012\102\014\122\017\106\020\120\001\001\000" +
    "\022\004\157\006\160\007\162\012\156\013\163\014\165" +
    "\017\106\020\120\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION_FOR ::= Op_decremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION_FOR ::= Identificador Op_decremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION_FOR ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_FOR ::= T_int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP_RELACIONAL ::= Op_andB 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP_RELACIONAL ::= Op_orB 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP_RELACIONAL ::= Op_mayorE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP_RELACIONAL ::= Op_menorE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP_RELACIONAL ::= Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP_RELACIONAL ::= Op_menor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP_RELACIONAL ::= Op_or 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_RELACIONAL ::= Op_and 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP_RELACIONAL ::= Op_diferente 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_RELACIONAL ::= Op_igual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TRUE_FALSE ::= Op_boolFalse 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TRUE_FALSE",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TRUE_FALSE ::= Op_boolTrue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TRUE_FALSE",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL TRUE_FALSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_BOOLEANA ::= TRUE_FALSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // T_DATO_FLOTANTE ::= T_double 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO_FLOTANTE",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // T_DATO_FLOTANTE ::= T_float 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO_FLOTANTE",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // T_DATO_ENTERO ::= T_byte 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO_ENTERO",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // T_DATO_ENTERO ::= T_long 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO_ENTERO",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // T_DATO_ENTERO ::= T_int 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO_ENTERO",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= T_char Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= T_char Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= T_char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Cadena Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= T_DATO_FLOTANTE Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= T_DATO_FLOTANTE Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= T_DATO_ENTERO Identificador Igual Numero Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= T_DATO_ENTERO Identificador Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= T_DATO_ENTERO Identificador Igual Numero Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= T_DATO_ENTERO Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= T_DATO_ENTERO Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= T_DATO_ENTERO Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INICIO ::= LIBRERIAS T_int Main Parent_a Parent_c Llave_a SENTENCIA RETURN Identificador P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INICIO ::= LIBRERIAS T_int Main Parent_a Parent_c Llave_a RETURN Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INICIO ::= LIBRERIAS T_int Main Parent_a Parent_c Llave_a SENTENCIA RETURN Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INICIO ::= LIBRERIAS T_int Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INICIO ::= LIBRERIAS T_int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INICIO ::= LIBRERIAS Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INICIO ::= LIBRERIAS Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INICIO ::= LIBRERIAS Void Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INICIO ::= LIBRERIAS Void Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INICIO ::= T_int Main Parent_a Parent_c Llave_a SENTENCIA RETURN Identificador P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INICIO ::= T_int Main Parent_a Parent_c Llave_a RETURN Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INICIO ::= T_int Main Parent_a Parent_c Llave_a SENTENCIA RETURN Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INICIO ::= T_int Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INICIO ::= T_int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INICIO ::= Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INICIO ::= Void Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INICIO ::= Void Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LIBRERIAS ::= Include Op_menor Identificador Punto Identificador Op_mayor Include Op_menor Identificador Punto Identificador Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-15)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LIBRERIAS ::= Include Op_menor Identificador Punto Identificador Op_mayor Include Op_menor Identificador Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-13)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LIBRERIAS ::= Include Op_menor Identificador Op_mayor Include Op_menor Identificador Punto Identificador Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-12)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LIBRERIAS ::= Include Op_menor Identificador Op_mayor Include Op_menor Identificador Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LIBRERIAS ::= Include Op_menor Identificador Punto Identificador Op_mayor Include Op_menor Identificador Punto Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LIBRERIAS ::= Include Op_menor Identificador Punto Identificador Op_mayor Include Op_menor Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LIBRERIAS ::= Include Op_menor Identificador Op_mayor Include Op_menor Identificador Punto Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LIBRERIAS ::= Include Op_menor Identificador Op_mayor Include Op_menor Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LIBRERIAS ::= Include Op_menor Identificador Punto Identificador Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LIBRERIAS ::= Include Op_menor Identificador Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LIBRERIAS ::= Include Op_menor Iostream Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LIBRERIAS ::= Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LIBRERIAS ::= Include Op_menor Identificador Punto Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LIBRERIAS ::= Include Op_menor Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // LIBRERIAS ::= Include Op_menor Iostream Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

