
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 17 20:04:55 COT 2021
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 17 20:04:55 COT 2021
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\010\006\000\002\010" +
    "\006\000\002\010\010\000\002\010\006\000\002\010\012" +
    "\000\002\010\012\000\002\010\014\000\002\010\012\000" +
    "\002\010\014\000\002\010\014\000\002\010\016\000\002" +
    "\010\016\000\002\010\017\000\002\010\020\000\002\010" +
    "\022\000\002\002\011\000\002\002\010\000\002\002\010" +
    "\000\002\002\007\000\002\002\011\000\002\002\010\000" +
    "\002\002\014\000\002\002\013\000\002\002\014\000\002" +
    "\002\012\000\002\002\011\000\002\002\011\000\002\002" +
    "\010\000\002\002\012\000\002\002\011\000\002\002\015" +
    "\000\002\002\014\000\002\002\015\000\002\012\003\000" +
    "\002\012\004\000\002\012\005\000\002\012\006\000\002" +
    "\012\002\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\005\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\004\005\000\002\004\007\000\002\004" +
    "\006\000\002\004\010\000\002\004\010\000\002\004\012" +
    "\000\002\004\005\000\002\004\011\000\002\004\005\000" +
    "\002\004\010\000\002\004\011\000\002\004\005\000\002" +
    "\004\010\000\002\004\011\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\021\003\000\002\021\003" +
    "\000\002\006\011\000\002\016\003\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\006\000\002" +
    "\016\007\000\002\023\003\000\002\023\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\007\015\000\002\013\011\000\002\014\013\000\002\015" +
    "\011\000\002\017\012\000\002\017\011\000\002\005\005" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\024\011\000\002\024\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\014\016\005\076\004\077\010\100\007\111" +
    "\012\001\002\000\004\077\u0119\001\002\000\004\077\u0107" +
    "\001\002\000\010\016\346\076\345\077\347\001\002\000" +
    "\004\101\342\001\002\000\004\070\076\001\002\000\004" +
    "\002\075\001\002\000\004\034\013\001\002\000\006\102" +
    "\015\104\014\001\002\000\006\035\023\061\024\001\002" +
    "\000\004\035\016\001\002\000\012\016\000\076\000\077" +
    "\000\100\017\001\002\000\004\101\020\001\002\000\004" +
    "\103\021\001\002\000\004\060\022\001\002\000\010\016" +
    "\ufffc\076\ufffc\077\ufffc\001\002\000\014\016\uffff\076\uffff" +
    "\077\uffff\100\052\111\053\001\002\000\004\104\025\001" +
    "\002\000\004\035\026\001\002\000\014\016\ufffe\076\ufffe" +
    "\077\ufffe\100\027\111\030\001\002\000\004\101\047\001" +
    "\002\000\004\034\031\001\002\000\004\104\032\001\002" +
    "\000\006\035\033\061\034\001\002\000\012\016\ufff7\076" +
    "\ufff7\077\ufff7\100\043\001\002\000\004\104\035\001\002" +
    "\000\004\035\036\001\002\000\012\016\ufff6\076\ufff6\077" +
    "\ufff6\100\037\001\002\000\004\101\040\001\002\000\004" +
    "\103\041\001\002\000\004\060\042\001\002\000\010\016" +
    "\ufff2\076\ufff2\077\ufff2\001\002\000\004\101\044\001\002" +
    "\000\004\103\045\001\002\000\004\060\046\001\002\000" +
    "\010\016\ufff3\076\ufff3\077\ufff3\001\002\000\004\103\050" +
    "\001\002\000\004\060\051\001\002\000\010\016\ufffa\076" +
    "\ufffa\077\ufffa\001\002\000\004\101\072\001\002\000\004" +
    "\034\054\001\002\000\004\104\055\001\002\000\006\035" +
    "\056\061\057\001\002\000\012\016\ufff9\076\ufff9\077\ufff9" +
    "\100\066\001\002\000\004\104\060\001\002\000\006\035" +
    "\061\100\062\001\002\000\010\016\ufff8\076\ufff8\077\ufff8" +
    "\001\002\000\004\101\063\001\002\000\004\103\064\001" +
    "\002\000\004\060\065\001\002\000\010\016\ufff4\076\ufff4" +
    "\077\ufff4\001\002\000\004\101\067\001\002\000\004\103" +
    "\070\001\002\000\004\060\071\001\002\000\010\016\ufff5" +
    "\076\ufff5\077\ufff5\001\002\000\004\103\073\001\002\000" +
    "\004\060\074\001\002\000\010\016\ufffb\076\ufffb\077\ufffb" +
    "\001\002\000\004\002\001\001\002\000\004\071\077\001" +
    "\002\000\004\072\100\001\002\000\032\005\121\010\125" +
    "\011\102\015\115\016\101\017\106\020\114\021\117\022" +
    "\116\023\120\073\111\105\123\001\002\000\004\104\uffbf" +
    "\001\002\000\004\070\304\001\002\000\034\005\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\073\uffd3\105\uffd3\001\002\000" +
    "\034\005\uffd9\007\uffd9\010\uffd9\011\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\073\uffd9\105" +
    "\uffd9\001\002\000\034\005\121\007\170\010\125\011\102" +
    "\015\115\016\101\017\106\020\114\021\117\022\116\023" +
    "\120\073\303\105\123\001\002\000\004\104\uffbb\001\002" +
    "\000\004\104\264\001\002\000\034\005\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\073\uffd7\105\uffd7\001\002\000\004\002" +
    "\uffee\001\002\000\034\005\uffce\007\uffce\010\uffce\011\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\073\uffce\105\uffce\001\002\000\034\005\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\073\uffd5\105\uffd5\001\002\000\004" +
    "\104\uffbe\001\002\000\004\104\253\001\002\000\004\104" +
    "\uffbc\001\002\000\004\104\242\001\002\000\004\104\uffbd" +
    "\001\002\000\004\070\230\001\002\000\004\104\221\001" +
    "\002\000\004\070\203\001\002\000\034\005\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\073\uffd0\105\uffd0\001\002\000\004" +
    "\070\126\001\002\000\010\045\132\046\130\104\133\001" +
    "\002\000\006\060\uffb9\071\uffb9\001\002\000\006\060\uffb3" +
    "\071\uffb3\001\002\000\004\071\156\001\002\000\006\060" +
    "\uffb2\071\uffb2\001\002\000\026\032\143\033\135\034\136" +
    "\035\142\036\146\037\137\040\134\041\141\042\140\043" +
    "\145\001\002\000\014\045\uffab\046\uffab\064\uffab\104\uffab" +
    "\113\uffab\001\002\000\014\045\uffb0\046\uffb0\064\uffb0\104" +
    "\uffb0\113\uffb0\001\002\000\014\045\uffad\046\uffad\064\uffad" +
    "\104\uffad\113\uffad\001\002\000\014\045\uffaf\046\uffaf\064" +
    "\uffaf\104\uffaf\113\uffaf\001\002\000\014\045\uffa9\046\uffa9" +
    "\064\uffa9\104\uffa9\113\uffa9\001\002\000\014\045\uffaa\046" +
    "\uffaa\064\uffaa\104\uffaa\113\uffaa\001\002\000\014\045\uffac" +
    "\046\uffac\064\uffac\104\uffac\113\uffac\001\002\000\014\045" +
    "\uffb1\046\uffb1\064\uffb1\104\uffb1\113\uffb1\001\002\000\014" +
    "\045\132\046\130\064\151\104\152\113\147\001\002\000" +
    "\014\045\uffa8\046\uffa8\064\uffa8\104\uffa8\113\uffa8\001\002" +
    "\000\014\045\uffae\046\uffae\064\uffae\104\uffae\113\uffae\001" +
    "\002\000\006\060\uffb7\071\uffb7\001\002\000\006\060\uffb8" +
    "\071\uffb8\001\002\000\006\064\153\104\154\001\002\000" +
    "\006\060\uffb6\071\uffb6\001\002\000\006\060\uffb5\071\uffb5" +
    "\001\002\000\004\064\155\001\002\000\006\060\uffb4\071" +
    "\uffb4\001\002\000\004\072\157\001\002\000\030\005\121" +
    "\010\125\011\102\015\115\016\101\017\106\020\114\021" +
    "\117\022\116\023\120\105\123\001\002\000\034\005\121" +
    "\007\170\010\125\011\102\015\115\016\101\017\106\020" +
    "\114\021\117\022\116\023\120\073\164\105\123\001\002" +
    "\000\034\005\uffd4\007\uffd4\010\uffd4\011\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\073\uffd4" +
    "\105\uffd4\001\002\000\034\005\uffda\007\uffda\010\uffda\011" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\073\uffda\105\uffda\001\002\000\034\005\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\073\uffd8\105\uffd8\001\002\000" +
    "\034\005\uffa6\007\uffa6\010\uffa6\011\uffa6\015\uffa6\016\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\073\uffa6\105" +
    "\uffa6\001\002\000\034\005\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\073\uffcf\105\uffcf\001\002\000\034\005\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\073\uffd6\105\uffd6\001\002\000\004" +
    "\007\170\001\002\000\004\072\172\001\002\000\034\005" +
    "\uffd1\007\uffd1\010\uffd1\011\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\023\uffd1\073\uffd1\105\uffd1\001" +
    "\002\000\030\005\121\010\125\011\102\015\115\016\101" +
    "\017\106\020\114\021\117\022\116\023\120\105\123\001" +
    "\002\000\034\005\121\007\170\010\125\011\102\015\115" +
    "\016\101\017\106\020\114\021\117\022\116\023\120\073" +
    "\174\105\123\001\002\000\004\010\175\001\002\000\004" +
    "\070\176\001\002\000\010\045\132\046\130\104\133\001" +
    "\002\000\004\071\200\001\002\000\004\060\201\001\002" +
    "\000\034\005\uffa5\007\uffa5\010\uffa5\011\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\073\uffa5" +
    "\105\uffa5\001\002\000\034\005\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\073\uffd2\105\uffd2\001\002\000\004\064\204\001" +
    "\002\000\006\064\uffdb\104\206\001\002\000\004\064\212" +
    "\001\002\000\006\064\uffdf\104\207\001\002\000\006\064" +
    "\uffde\104\210\001\002\000\006\064\uffdd\104\211\001\002" +
    "\000\004\064\uffdc\001\002\000\006\062\214\071\213\001" +
    "\002\000\004\060\220\001\002\000\004\104\215\001\002" +
    "\000\004\071\216\001\002\000\004\060\217\001\002\000" +
    "\034\005\uff9b\007\uff9b\010\uff9b\011\uff9b\015\uff9b\016\uff9b" +
    "\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\073\uff9b\105" +
    "\uff9b\001\002\000\034\005\uff9c\007\uff9c\010\uff9c\011\uff9c" +
    "\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023" +
    "\uff9c\073\uff9c\105\uff9c\001\002\000\006\024\223\060\222" +
    "\001\002\000\034\005\uffc7\007\uffc7\010\uffc7\011\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\073\uffc7\105\uffc7\001\002\000\004\113\224\001\002\000" +
    "\004\061\225\001\002\000\004\113\226\001\002\000\004" +
    "\060\227\001\002\000\034\005\uffc6\007\uffc6\010\uffc6\011" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\073\uffc6\105\uffc6\001\002\000\010\045\132\046" +
    "\130\104\133\001\002\000\004\071\232\001\002\000\004" +
    "\072\233\001\002\000\030\005\121\010\125\011\102\015" +
    "\115\016\101\017\106\020\114\021\117\022\116\023\120" +
    "\105\123\001\002\000\034\005\121\007\170\010\125\011" +
    "\102\015\115\016\101\017\106\020\114\021\117\022\116" +
    "\023\120\073\235\105\123\001\002\000\036\005\uffba\006" +
    "\236\007\uffba\010\uffba\011\uffba\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\073\uffba\105\uffba\001" +
    "\002\000\004\072\237\001\002\000\030\005\121\010\125" +
    "\011\102\015\115\016\101\017\106\020\114\021\117\022" +
    "\116\023\120\105\123\001\002\000\034\005\121\007\170" +
    "\010\125\011\102\015\115\016\101\017\106\020\114\021" +
    "\117\022\116\023\120\073\241\105\123\001\002\000\034" +
    "\005\uffa7\007\uffa7\010\uffa7\011\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\073\uffa7\105\uffa7" +
    "\001\002\000\006\024\244\060\243\001\002\000\034\005" +
    "\uffc2\007\uffc2\010\uffc2\011\uffc2\015\uffc2\016\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\023\uffc2\073\uffc2\105\uffc2\001" +
    "\002\000\004\064\245\001\002\000\006\064\246\104\247" +
    "\001\002\000\004\060\252\001\002\000\004\064\250\001" +
    "\002\000\004\060\251\001\002\000\034\005\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\073\uffc0\105\uffc0\001\002\000\034" +
    "\005\uffc1\007\uffc1\010\uffc1\011\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\073\uffc1\105\uffc1" +
    "\001\002\000\006\024\255\060\254\001\002\000\034\005" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\015\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\uffc5\073\uffc5\105\uffc5\001" +
    "\002\000\004\064\256\001\002\000\006\064\257\104\260" +
    "\001\002\000\004\060\263\001\002\000\004\064\261\001" +
    "\002\000\004\060\262\001\002\000\034\005\uffc3\007\uffc3" +
    "\010\uffc3\011\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\073\uffc3\105\uffc3\001\002\000\034" +
    "\005\uffc4\007\uffc4\010\uffc4\011\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\073\uffc4\105\uffc4" +
    "\001\002\000\010\024\267\060\265\104\266\001\002\000" +
    "\034\005\uffcd\007\uffcd\010\uffcd\011\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\073\uffcd\105" +
    "\uffcd\001\002\000\006\024\300\060\277\001\002\000\004" +
    "\113\270\001\002\000\006\060\271\104\272\001\002\000" +
    "\034\005\uffcc\007\uffcc\010\uffcc\011\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\073\uffcc\105" +
    "\uffcc\001\002\000\006\024\274\060\273\001\002\000\034" +
    "\005\uffca\007\uffca\010\uffca\011\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\073\uffca\105\uffca" +
    "\001\002\000\004\113\275\001\002\000\004\060\276\001" +
    "\002\000\034\005\uffc8\007\uffc8\010\uffc8\011\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\073" +
    "\uffc8\105\uffc8\001\002\000\034\005\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\073\uffcb\105\uffcb\001\002\000\004\113\301" +
    "\001\002\000\004\060\302\001\002\000\034\005\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\073\uffc9\105\uffc9\001\002\000" +
    "\004\002\uffef\001\002\000\006\016\306\104\307\001\002" +
    "\000\004\071\336\001\002\000\004\104\327\001\002\000" +
    "\004\024\310\001\002\000\004\113\311\001\002\000\004" +
    "\060\312\001\002\000\010\045\132\046\130\104\133\001" +
    "\002\000\004\060\314\001\002\000\010\047\316\050\320" +
    "\104\317\001\002\000\004\071\uffa2\001\002\000\004\104" +
    "\326\001\002\000\010\024\323\047\322\050\324\001\002" +
    "\000\004\104\321\001\002\000\004\071\uff9d\001\002\000" +
    "\004\071\uffa0\001\002\000\004\113\325\001\002\000\004" +
    "\071\uff9f\001\002\000\004\071\uffa1\001\002\000\004\071" +
    "\uff9e\001\002\000\004\024\330\001\002\000\004\113\331" +
    "\001\002\000\004\060\332\001\002\000\010\045\132\046" +
    "\130\104\133\001\002\000\004\060\334\001\002\000\010" +
    "\047\316\050\320\104\317\001\002\000\004\071\uffa3\001" +
    "\002\000\004\072\337\001\002\000\030\005\121\010\125" +
    "\011\102\015\115\016\101\017\106\020\114\021\117\022" +
    "\116\023\120\105\123\001\002\000\034\005\121\007\170" +
    "\010\125\011\102\015\115\016\101\017\106\020\114\021" +
    "\117\022\116\023\120\073\341\105\123\001\002\000\034" +
    "\005\uffa4\007\uffa4\010\uffa4\011\uffa4\015\uffa4\016\uffa4\017" +
    "\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\073\uffa4\105\uffa4" +
    "\001\002\000\004\103\343\001\002\000\004\060\344\001" +
    "\002\000\010\016\ufffd\076\ufffd\077\ufffd\001\002\000\004" +
    "\077\u0100\001\002\000\004\077\356\001\002\000\004\070" +
    "\350\001\002\000\004\071\351\001\002\000\004\072\352" +
    "\001\002\000\032\005\121\010\125\011\102\015\115\016" +
    "\101\017\106\020\114\021\117\022\116\023\120\073\354" +
    "\105\123\001\002\000\034\005\121\007\170\010\125\011" +
    "\102\015\115\016\101\017\106\020\114\021\117\022\116" +
    "\023\120\073\355\105\123\001\002\000\004\002\uffe5\001" +
    "\002\000\004\002\uffe6\001\002\000\004\070\357\001\002" +
    "\000\004\071\360\001\002\000\004\072\361\001\002\000" +
    "\032\005\121\010\125\011\102\015\115\016\101\017\106" +
    "\020\114\021\117\022\116\023\120\073\364\105\123\001" +
    "\002\000\034\005\121\007\170\010\125\011\102\015\115" +
    "\016\101\017\106\020\114\021\117\022\116\023\120\073" +
    "\371\105\123\001\002\000\004\113\365\001\002\000\004" +
    "\002\uffe3\001\002\000\004\060\366\001\002\000\004\073" +
    "\367\001\002\000\004\002\uffe1\001\002\000\006\104\373" +
    "\113\372\001\002\000\004\002\uffe4\001\002\000\004\060" +
    "\376\001\002\000\004\060\374\001\002\000\004\073\375" +
    "\001\002\000\004\002\uffe0\001\002\000\004\073\377\001" +
    "\002\000\004\002\uffe2\001\002\000\004\070\u0101\001\002" +
    "\000\004\071\u0102\001\002\000\004\072\u0103\001\002\000" +
    "\032\005\121\010\125\011\102\015\115\016\101\017\106" +
    "\020\114\021\117\022\116\023\120\073\u0105\105\123\001" +
    "\002\000\034\005\121\007\170\010\125\011\102\015\115" +
    "\016\101\017\106\020\114\021\117\022\116\023\120\073" +
    "\u0106\105\123\001\002\000\004\002\uffe7\001\002\000\004" +
    "\002\uffe8\001\002\000\004\070\u0108\001\002\000\004\071" +
    "\u0109\001\002\000\004\072\u010a\001\002\000\032\005\121" +
    "\010\125\011\102\015\115\016\101\017\106\020\114\021" +
    "\117\022\116\023\120\073\u010d\105\123\001\002\000\034" +
    "\005\121\007\170\010\125\011\102\015\115\016\101\017" +
    "\106\020\114\021\117\022\116\023\120\073\u0112\105\123" +
    "\001\002\000\004\113\u010e\001\002\000\004\002\uffec\001" +
    "\002\000\004\060\u010f\001\002\000\004\073\u0110\001\002" +
    "\000\004\002\uffea\001\002\000\006\104\u0114\113\u0113\001" +
    "\002\000\004\002\uffed\001\002\000\004\060\u0117\001\002" +
    "\000\004\060\u0115\001\002\000\004\073\u0116\001\002\000" +
    "\004\002\uffe9\001\002\000\004\073\u0118\001\002\000\004" +
    "\002\uffeb\001\002\000\004\070\u011a\001\002\000\004\071" +
    "\u011b\001\002\000\004\072\u011c\001\002\000\032\005\121" +
    "\010\125\011\102\015\115\016\101\017\106\020\114\021" +
    "\117\022\116\023\120\073\u011e\105\123\001\002\000\034" +
    "\005\121\007\170\010\125\011\102\015\115\016\101\017" +
    "\106\020\114\021\117\022\116\023\120\073\u011f\105\123" +
    "\001\002\000\004\002\ufff0\001\002\000\004\002\ufff1\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\006\002\010\010\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\104\004\103\006\107\007\112" +
    "\013\102\015\123\020\106\021\121\024\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\161\006\162\007\165\013\160\014" +
    "\166\015\170\020\106\021\121\024\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\130\023\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\157\004\103\006\107\007\112\013\102" +
    "\015\123\020\106\021\121\024\111\001\001\000\024\004" +
    "\161\006\162\007\165\013\160\014\166\015\170\020\106" +
    "\021\121\024\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\172\004\103\006\107" +
    "\007\112\013\102\015\123\020\106\021\121\024\111\001" +
    "\001\000\024\004\161\006\162\007\165\013\160\014\166" +
    "\015\170\020\106\021\121\024\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\176\023\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\230\023\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\233\004\103\006\107\007\112\013\102" +
    "\015\123\020\106\021\121\024\111\001\001\000\024\004" +
    "\161\006\162\007\165\013\160\014\166\015\170\020\106" +
    "\021\121\024\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\237\004\103\006\107\007\112\013\102" +
    "\015\123\020\106\021\121\024\111\001\001\000\024\004" +
    "\161\006\162\007\165\013\160\014\166\015\170\020\106" +
    "\021\121\024\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\312\023\126\001\001\000\002" +
    "\001\001\000\004\005\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\332\023" +
    "\126\001\001\000\002\001\001\000\004\005\334\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\337\004" +
    "\103\006\107\007\112\013\102\015\123\020\106\021\121" +
    "\024\111\001\001\000\024\004\161\006\162\007\165\013" +
    "\160\014\166\015\170\020\106\021\121\024\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\352\004\103\006\107\007\112\013\102\015\123\020\106" +
    "\021\121\024\111\001\001\000\024\004\161\006\162\007" +
    "\165\013\160\014\166\015\170\020\106\021\121\024\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\361" +
    "\004\103\006\107\007\112\011\362\013\102\015\123\020" +
    "\106\021\121\024\111\001\001\000\026\004\161\006\162" +
    "\007\165\011\367\013\160\014\166\015\170\020\106\021" +
    "\121\024\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\u0103\004\103\006\107\007" +
    "\112\013\102\015\123\020\106\021\121\024\111\001\001" +
    "\000\024\004\161\006\162\007\165\013\160\014\166\015" +
    "\170\020\106\021\121\024\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\u010a\004\103\006\107\007\112" +
    "\011\u010b\013\102\015\123\020\106\021\121\024\111\001" +
    "\001\000\026\004\161\006\162\007\165\011\u0110\013\160" +
    "\014\166\015\170\020\106\021\121\024\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\u011c\004\103\006\107\007\112\013\102\015\123\020" +
    "\106\021\121\024\111\001\001\000\024\004\161\006\162" +
    "\007\165\013\160\014\166\015\170\020\106\021\121\024" +
    "\164\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PRINTF ::= Printf Parent_a Comillas TEXTO Comillas Coma Identificador Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PRINTF ::= Printf Parent_a Comillas TEXTO Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARACION_FOR ::= Op_decremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION_FOR ::= Identificador Op_decremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARACION_FOR ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_FOR ::= T_int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP_RELACIONAL ::= Op_andB 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP_RELACIONAL ::= Op_orB 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP_RELACIONAL ::= Op_mayorE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP_RELACIONAL ::= Op_menorE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP_RELACIONAL ::= Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP_RELACIONAL ::= Op_menor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP_RELACIONAL ::= Op_or 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP_RELACIONAL ::= Op_and 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP_RELACIONAL ::= Op_diferente 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP_RELACIONAL ::= Op_igual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TRUE_FALSE ::= Op_boolFalse 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TRUE_FALSE",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TRUE_FALSE ::= Op_boolTrue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TRUE_FALSE",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL TRUE_FALSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_BOOLEANA ::= TRUE_FALSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // T_DATO_FLOTANTE ::= T_double 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO_FLOTANTE",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // T_DATO_FLOTANTE ::= T_float 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO_FLOTANTE",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // T_DATO_ENTERO ::= T_byte 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO_ENTERO",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // T_DATO_ENTERO ::= T_long 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO_ENTERO",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // T_DATO_ENTERO ::= T_int 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO_ENTERO",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= T_char Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= T_char Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= T_char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Cadena Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= T_DATO_FLOTANTE Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= T_DATO_FLOTANTE Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= T_DATO_ENTERO Identificador Igual Numero Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= T_DATO_ENTERO Identificador Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= T_DATO_ENTERO Identificador Igual Numero Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= T_DATO_ENTERO Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= T_DATO_ENTERO Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= T_DATO_ENTERO Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TEXTO ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TEXTO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TEXTO ::= Identificador Identificador Identificador Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TEXTO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TEXTO ::= Identificador Identificador Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TEXTO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TEXTO ::= Identificador Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TEXTO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TEXTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TEXTO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INICIO ::= LIBRERIAS T_int Main Parent_a Parent_c Llave_a SENTENCIA RETURN Identificador P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INICIO ::= LIBRERIAS T_int Main Parent_a Parent_c Llave_a RETURN Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INICIO ::= LIBRERIAS T_int Main Parent_a Parent_c Llave_a SENTENCIA RETURN Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INICIO ::= LIBRERIAS T_int Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INICIO ::= LIBRERIAS T_int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INICIO ::= LIBRERIAS Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INICIO ::= LIBRERIAS Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INICIO ::= LIBRERIAS Void Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INICIO ::= LIBRERIAS Void Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INICIO ::= T_int Main Parent_a Parent_c Llave_a SENTENCIA RETURN Identificador P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INICIO ::= T_int Main Parent_a Parent_c Llave_a RETURN Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INICIO ::= T_int Main Parent_a Parent_c Llave_a SENTENCIA RETURN Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INICIO ::= T_int Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INICIO ::= T_int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INICIO ::= Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INICIO ::= Void Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INICIO ::= Void Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LIBRERIAS ::= Include Op_menor Identificador Punto Identificador Op_mayor Include Op_menor Identificador Punto Identificador Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-15)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LIBRERIAS ::= Include Op_menor Identificador Punto Identificador Op_mayor Include Op_menor Identificador Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-13)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LIBRERIAS ::= Include Op_menor Identificador Op_mayor Include Op_menor Identificador Punto Identificador Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-12)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LIBRERIAS ::= Include Op_menor Identificador Op_mayor Include Op_menor Identificador Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LIBRERIAS ::= Include Op_menor Identificador Punto Identificador Op_mayor Include Op_menor Identificador Punto Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LIBRERIAS ::= Include Op_menor Identificador Punto Identificador Op_mayor Include Op_menor Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LIBRERIAS ::= Include Op_menor Identificador Op_mayor Include Op_menor Identificador Punto Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LIBRERIAS ::= Include Op_menor Identificador Op_mayor Include Op_menor Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LIBRERIAS ::= Include Op_menor Identificador Punto Identificador Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LIBRERIAS ::= Include Op_menor Identificador Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LIBRERIAS ::= Include Op_menor Iostream Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LIBRERIAS ::= Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LIBRERIAS ::= Include Op_menor Identificador Punto Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LIBRERIAS ::= Include Op_menor Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // LIBRERIAS ::= Include Op_menor Iostream Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

