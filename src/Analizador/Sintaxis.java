
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 12 22:48:49 COT 2021
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 12 22:48:49 COT 2021
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\002\012\000\002\002" +
    "\012\000\002\002\011\000\002\002\011\000\002\002\011" +
    "\000\002\002\010\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\005\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\005\000\002\004\007\000\002" +
    "\004\010\000\002\004\011\000\002\004\005\000\002\004" +
    "\011\000\002\004\005\000\002\004\007\000\002\004\005" +
    "\000\002\004\011\000\002\004\010\000\002\004\011\000" +
    "\002\004\007\000\002\004\010\000\002\004\003\000\002" +
    "\024\005\000\002\024\005\000\002\024\006\000\002\024" +
    "\006\000\002\024\006\000\002\024\006\000\002\024\006" +
    "\000\002\024\011\000\002\024\011\000\002\024\011\000" +
    "\002\024\011\000\002\024\011\000\002\024\015\000\002" +
    "\024\015\000\002\024\015\000\002\024\015\000\002\024" +
    "\011\000\002\024\011\000\002\024\011\000\002\024\011" +
    "\000\002\024\011\000\002\024\015\000\002\024\015\000" +
    "\002\024\015\000\002\024\015\000\002\024\015\000\002" +
    "\005\011\000\002\013\003\000\002\013\003\000\002\013" +
    "\004\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\006\000\002\013\007\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\006\000\002\013\007\000\002\013" +
    "\005\000\002\013\005\000\002\013\006\000\002\013\007" +
    "\000\002\013\005\000\002\013\005\000\002\013\006\000" +
    "\002\013\007\000\002\013\005\000\002\013\005\000\002" +
    "\013\006\000\002\013\007\000\002\013\005\000\002\013" +
    "\005\000\002\013\006\000\002\013\007\000\002\013\005" +
    "\000\002\013\005\000\002\013\006\000\002\013\007\000" +
    "\002\013\005\000\002\013\005\000\002\013\006\000\002" +
    "\013\007\000\002\013\005\000\002\013\005\000\002\013" +
    "\006\000\002\013\007\000\002\013\005\000\002\013\005" +
    "\000\002\013\006\000\002\013\007\000\002\006\015\000" +
    "\002\010\011\000\002\011\013\000\002\012\011\000\002" +
    "\026\012\000\002\026\011\000\002\027\007\000\002\027" +
    "\007\000\002\027\004\000\002\027\004\000\002\027\004" +
    "\000\002\027\004\000\002\016\010\000\002\016\012\000" +
    "\002\017\010\000\002\015\007\000\002\020\007\000\002" +
    "\020\007\000\002\023\010\000\002\022\010\000\002\021" +
    "\011\000\002\025\011\000\002\025\011\000\002\025\006" +
    "\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a1\000\010\017\004\071\005\074\006\001\002\000" +
    "\004\074\u019b\001\002\000\004\074\u0192\001\002\000\004" +
    "\063\011\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\004\064\012\001\002\000\004\065\013" +
    "\001\002\000\046\004\044\006\043\011\053\012\016\013" +
    "\046\016\040\017\014\020\025\021\037\022\042\023\041" +
    "\061\045\062\035\066\031\072\047\073\054\100\027\102" +
    "\034\001\002\000\004\100\u017e\001\002\000\052\006\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\061\uffe4\062\uffe4" +
    "\066\uffe4\072\uffe4\073\uffe4\075\uffe4\100\uffe4\102\uffe4\001" +
    "\002\000\004\063\u015c\001\002\000\052\006\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\061\uffe6\062\uffe6\066\uffe6" +
    "\072\uffe6\073\uffe6\075\uffe6\100\uffe6\102\uffe6\001\002\000" +
    "\052\006\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\061" +
    "\ufff3\062\ufff3\066\ufff3\072\ufff3\073\ufff3\075\ufff3\100\ufff3" +
    "\102\ufff3\001\002\000\052\006\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\061\uffec\062\uffec\066\uffec\072\uffec\073" +
    "\uffec\075\uffec\100\uffec\102\uffec\001\002\000\052\006\ufff9" +
    "\010\ufff9\011\ufff9\012\ufff9\013\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\061\ufff9\062\ufff9" +
    "\066\ufff9\072\ufff9\073\ufff9\075\ufff9\100\ufff9\102\ufff9\001" +
    "\002\000\052\006\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\061\uffe2\062\uffe2\066\uffe2\072\uffe2\073\uffe2\075\uffe2" +
    "\100\uffe2\102\uffe2\001\002\000\046\006\043\010\224\011" +
    "\053\012\016\013\046\016\040\017\014\020\025\021\037" +
    "\022\042\023\041\061\045\062\035\066\u015a\072\047\073" +
    "\054\100\027\102\034\001\002\000\004\100\u013f\001\002" +
    "\000\052\006\uffea\010\uffea\011\uffea\012\uffea\013\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\061\uffea\062\uffea\066\uffea\072\uffea\073\uffea\075\uffea\100" +
    "\uffea\102\uffea\001\002\000\022\025\u012c\050\u0128\051\u012b" +
    "\052\u012a\053\u0126\054\u0129\055\u0125\056\u0127\001\002\000" +
    "\052\006\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\061" +
    "\ufff7\062\ufff7\066\ufff7\072\ufff7\073\ufff7\075\ufff7\100\ufff7" +
    "\102\ufff7\001\002\000\004\004\u0124\001\002\000\052\006" +
    "\uffee\010\uffee\011\uffee\012\uffee\013\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\061\uffee\062" +
    "\uffee\066\uffee\072\uffee\073\uffee\075\uffee\100\uffee\102\uffee" +
    "\001\002\000\052\006\ufff5\010\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\061\ufff5\062\ufff5\066\ufff5\072\ufff5\073\ufff5\075" +
    "\ufff5\100\ufff5\102\ufff5\001\002\000\006\106\u0119\107\u011a" +
    "\001\002\000\004\057\u0114\001\002\000\052\006\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\023\uffe8\061\uffe8\062\uffe8\066" +
    "\uffe8\072\uffe8\073\uffe8\075\uffe8\100\uffe8\102\uffe8\001\002" +
    "\000\004\100\u0100\001\002\000\004\100\363\001\002\000" +
    "\004\100\330\001\002\000\004\100\320\001\002\000\004" +
    "\063\306\001\002\000\052\006\uffde\010\uffde\011\uffde\012" +
    "\uffde\013\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\061\uffde\062\uffde\066\uffde\072\uffde\073" +
    "\uffde\075\uffde\100\uffde\102\uffde\001\002\000\004\060\301" +
    "\001\002\000\004\063\251\001\002\000\004\063\240\001" +
    "\002\000\052\006\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\061\uffcf\062\uffcf\066\uffcf\072\uffcf\073\uffcf\075\uffcf" +
    "\100\uffcf\102\uffcf\001\002\000\052\006\uffe0\010\uffe0\011" +
    "\uffe0\012\uffe0\013\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\061\uffe0\062\uffe0\066\uffe0\072" +
    "\uffe0\073\uffe0\075\uffe0\100\uffe0\102\uffe0\001\002\000\052" +
    "\006\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\061\ufff0" +
    "\062\ufff0\066\ufff0\072\ufff0\073\ufff0\075\ufff0\100\ufff0\102" +
    "\ufff0\001\002\000\004\063\063\001\002\000\004\063\056" +
    "\001\002\000\052\006\uffdf\010\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\061\uffdf\062\uffdf\066\uffdf\072\uffdf\073\uffdf\075" +
    "\uffdf\100\uffdf\102\uffdf\001\002\000\004\005\057\001\002" +
    "\000\004\005\060\001\002\000\004\064\061\001\002\000" +
    "\004\075\062\001\002\000\052\006\uff76\010\uff76\011\uff76" +
    "\012\uff76\013\uff76\015\uff76\016\uff76\017\uff76\020\uff76\021" +
    "\uff76\022\uff76\023\uff76\061\uff76\062\uff76\066\uff76\072\uff76" +
    "\073\uff76\075\uff76\100\uff76\102\uff76\001\002\000\012\043" +
    "\067\046\066\047\064\100\070\001\002\000\006\064\uffb3" +
    "\075\uffb3\001\002\000\004\064\204\001\002\000\006\064" +
    "\uffb2\075\uffb2\001\002\000\004\100\203\001\002\000\026" +
    "\033\100\034\072\035\073\036\076\037\101\040\074\041" +
    "\071\042\077\044\075\045\102\001\002\000\010\005\176" +
    "\100\177\103\175\001\002\000\014\005\166\046\170\047" +
    "\167\100\171\103\165\001\002\000\010\005\160\100\161" +
    "\103\157\001\002\000\010\005\152\100\153\103\151\001" +
    "\002\000\010\005\144\100\145\103\143\001\002\000\010" +
    "\005\136\100\137\103\135\001\002\000\010\005\130\100" +
    "\131\103\127\001\002\000\014\005\120\046\122\047\121" +
    "\100\123\103\117\001\002\000\010\005\112\100\113\103" +
    "\111\001\002\000\010\005\104\100\105\103\103\001\002" +
    "\000\006\064\uffa0\075\uffa0\001\002\000\006\005\106\100" +
    "\107\001\002\000\006\064\uff9f\075\uff9f\001\002\000\006" +
    "\064\uff9e\075\uff9e\001\002\000\004\005\110\001\002\000" +
    "\006\064\uff9d\075\uff9d\001\002\000\006\064\uffa4\075\uffa4" +
    "\001\002\000\006\005\114\100\115\001\002\000\006\064" +
    "\uffa3\075\uffa3\001\002\000\006\064\uffa2\075\uffa2\001\002" +
    "\000\004\005\116\001\002\000\006\064\uffa1\075\uffa1\001" +
    "\002\000\006\064\uffae\075\uffae\001\002\000\006\005\124" +
    "\100\125\001\002\000\006\064\uffb0\075\uffb0\001\002\000" +
    "\006\064\uffaf\075\uffaf\001\002\000\006\064\uffad\075\uffad" +
    "\001\002\000\006\064\uffac\075\uffac\001\002\000\004\005" +
    "\126\001\002\000\006\064\uffab\075\uffab\001\002\000\006" +
    "\064\uff8c\075\uff8c\001\002\000\006\005\132\100\133\001" +
    "\002\000\006\064\uff8b\075\uff8b\001\002\000\006\064\uff8a" +
    "\075\uff8a\001\002\000\004\005\134\001\002\000\006\064" +
    "\uff89\075\uff89\001\002\000\006\064\uff9c\075\uff9c\001\002" +
    "\000\006\005\140\100\141\001\002\000\006\064\uff9b\075" +
    "\uff9b\001\002\000\006\064\uff9a\075\uff9a\001\002\000\004" +
    "\005\142\001\002\000\006\064\uff99\075\uff99\001\002\000" +
    "\006\064\uff90\075\uff90\001\002\000\006\005\146\100\147" +
    "\001\002\000\006\064\uff8f\075\uff8f\001\002\000\006\064" +
    "\uff8e\075\uff8e\001\002\000\004\005\150\001\002\000\006" +
    "\064\uff8d\075\uff8d\001\002\000\006\064\uff94\075\uff94\001" +
    "\002\000\006\005\154\100\155\001\002\000\006\064\uff93" +
    "\075\uff93\001\002\000\006\064\uff92\075\uff92\001\002\000" +
    "\004\005\156\001\002\000\006\064\uff91\075\uff91\001\002" +
    "\000\006\064\uff98\075\uff98\001\002\000\006\005\162\100" +
    "\163\001\002\000\006\064\uff97\075\uff97\001\002\000\006" +
    "\064\uff96\075\uff96\001\002\000\004\005\164\001\002\000" +
    "\006\064\uff95\075\uff95\001\002\000\006\064\uffa8\075\uffa8" +
    "\001\002\000\006\005\172\100\173\001\002\000\006\064" +
    "\uffaa\075\uffaa\001\002\000\006\064\uffa9\075\uffa9\001\002" +
    "\000\006\064\uffa7\075\uffa7\001\002\000\006\064\uffa6\075" +
    "\uffa6\001\002\000\004\005\174\001\002\000\006\064\uffa5" +
    "\075\uffa5\001\002\000\006\064\uff88\075\uff88\001\002\000" +
    "\006\005\200\100\201\001\002\000\006\064\uff87\075\uff87" +
    "\001\002\000\006\064\uff86\075\uff86\001\002\000\004\005" +
    "\202\001\002\000\006\064\uff85\075\uff85\001\002\000\006" +
    "\064\uffb1\075\uffb1\001\002\000\004\065\205\001\002\000" +
    "\044\004\044\006\043\011\053\012\016\013\046\016\040" +
    "\017\014\020\025\021\037\022\042\023\041\061\045\062" +
    "\035\072\047\073\054\100\027\102\034\001\002\000\046" +
    "\006\043\010\224\011\053\012\016\013\046\016\040\017" +
    "\014\020\025\021\037\022\042\023\041\061\045\062\035" +
    "\066\220\072\047\073\054\100\027\102\034\001\002\000" +
    "\052\006\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\061" +
    "\uffe5\062\uffe5\066\uffe5\072\uffe5\073\uffe5\075\uffe5\100\uffe5" +
    "\102\uffe5\001\002\000\052\006\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\061\uffe7\062\uffe7\066\uffe7\072\uffe7\073" +
    "\uffe7\075\uffe7\100\uffe7\102\uffe7\001\002\000\052\006\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\061\ufff4\062\ufff4" +
    "\066\ufff4\072\ufff4\073\ufff4\075\ufff4\100\ufff4\102\ufff4\001" +
    "\002\000\052\006\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\061\uffed\062\uffed\066\uffed\072\uffed\073\uffed\075\uffed" +
    "\100\uffed\102\uffed\001\002\000\052\006\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\061\uffe3\062\uffe3\066\uffe3\072" +
    "\uffe3\073\uffe3\075\uffe3\100\uffe3\102\uffe3\001\002\000\052" +
    "\006\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\061\ufffa" +
    "\062\ufffa\066\ufffa\072\ufffa\073\ufffa\075\ufffa\100\ufffa\102" +
    "\ufffa\001\002\000\052\006\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\061\uffeb\062\uffeb\066\uffeb\072\uffeb\073\uffeb" +
    "\075\uffeb\100\uffeb\102\uffeb\001\002\000\052\006\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\023\ufff8\061\ufff8\062\ufff8\066" +
    "\ufff8\072\ufff8\073\ufff8\075\ufff8\100\ufff8\102\ufff8\001\002" +
    "\000\052\006\uffef\010\uffef\011\uffef\012\uffef\013\uffef\015" +
    "\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\061\uffef\062\uffef\066\uffef\072\uffef\073\uffef\075\uffef\100" +
    "\uffef\102\uffef\001\002\000\052\006\uff83\010\uff83\011\uff83" +
    "\012\uff83\013\uff83\015\uff83\016\uff83\017\uff83\020\uff83\021" +
    "\uff83\022\uff83\023\uff83\061\uff83\062\uff83\066\uff83\072\uff83" +
    "\073\uff83\075\uff83\100\uff83\102\uff83\001\002\000\052\006" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\061\ufff6\062" +
    "\ufff6\066\ufff6\072\ufff6\073\ufff6\075\ufff6\100\ufff6\102\ufff6" +
    "\001\002\000\052\006\uffe9\010\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\061\uffe9\062\uffe9\066\uffe9\072\uffe9\073\uffe9\075" +
    "\uffe9\100\uffe9\102\uffe9\001\002\000\004\010\224\001\002" +
    "\000\004\065\227\001\002\000\052\006\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\061\uffe1\062\uffe1\066\uffe1\072" +
    "\uffe1\073\uffe1\075\uffe1\100\uffe1\102\uffe1\001\002\000\052" +
    "\006\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\061\ufff1" +
    "\062\ufff1\066\ufff1\072\ufff1\073\ufff1\075\ufff1\100\ufff1\102" +
    "\ufff1\001\002\000\044\004\044\006\043\011\053\012\016" +
    "\013\046\016\040\017\014\020\025\021\037\022\042\023" +
    "\041\061\045\062\035\072\047\073\054\100\027\102\034" +
    "\001\002\000\046\006\043\010\224\011\053\012\016\013" +
    "\046\016\040\017\014\020\025\021\037\022\042\023\041" +
    "\061\045\062\035\066\231\072\047\073\054\100\027\102" +
    "\034\001\002\000\004\011\232\001\002\000\004\063\233" +
    "\001\002\000\012\043\067\046\066\047\064\100\070\001" +
    "\002\000\004\064\235\001\002\000\004\075\236\001\002" +
    "\000\052\006\uff82\010\uff82\011\uff82\012\uff82\013\uff82\015" +
    "\uff82\016\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82" +
    "\061\uff82\062\uff82\066\uff82\072\uff82\073\uff82\075\uff82\100" +
    "\uff82\102\uff82\001\002\000\052\006\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\061\ufff2\062\ufff2\066\ufff2\072\ufff2" +
    "\073\ufff2\075\ufff2\100\ufff2\102\ufff2\001\002\000\004\005" +
    "\241\001\002\000\004\005\242\001\002\000\006\064\243" +
    "\076\244\001\002\000\004\075\250\001\002\000\004\100" +
    "\245\001\002\000\004\064\246\001\002\000\004\075\247" +
    "\001\002\000\052\006\uff77\010\uff77\011\uff77\012\uff77\013" +
    "\uff77\015\uff77\016\uff77\017\uff77\020\uff77\021\uff77\022\uff77" +
    "\023\uff77\061\uff77\062\uff77\066\uff77\072\uff77\073\uff77\075" +
    "\uff77\100\uff77\102\uff77\001\002\000\052\006\uff78\010\uff78" +
    "\011\uff78\012\uff78\013\uff78\015\uff78\016\uff78\017\uff78\020" +
    "\uff78\021\uff78\022\uff78\023\uff78\061\uff78\062\uff78\066\uff78" +
    "\072\uff78\073\uff78\075\uff78\100\uff78\102\uff78\001\002\000" +
    "\004\100\252\001\002\000\004\064\253\001\002\000\004" +
    "\065\254\001\002\000\006\014\255\105\256\001\002\000" +
    "\006\100\266\103\265\001\002\000\004\101\262\001\002" +
    "\000\004\066\261\001\002\000\004\066\uff6c\001\002\000" +
    "\052\006\uff70\010\uff70\011\uff70\012\uff70\013\uff70\015\uff70" +
    "\016\uff70\017\uff70\020\uff70\021\uff70\022\uff70\023\uff70\061" +
    "\uff70\062\uff70\066\uff70\072\uff70\073\uff70\075\uff70\100\uff70" +
    "\102\uff70\001\002\000\044\004\044\006\043\011\053\012" +
    "\016\013\046\016\040\017\014\020\025\021\037\022\042" +
    "\023\041\061\045\062\035\072\047\073\054\100\027\102" +
    "\034\001\002\000\046\006\043\010\224\011\053\012\016" +
    "\013\046\016\040\017\014\020\025\021\037\022\042\023" +
    "\041\061\045\062\035\072\047\073\054\075\264\100\027" +
    "\102\034\001\002\000\004\066\uff6d\001\002\000\004\101" +
    "\274\001\002\000\004\101\267\001\002\000\044\004\044" +
    "\006\043\011\053\012\016\013\046\016\040\017\014\020" +
    "\025\021\037\022\042\023\041\061\045\062\035\072\047" +
    "\073\054\100\027\102\034\001\002\000\046\006\043\010" +
    "\224\011\053\012\016\013\046\015\271\016\040\017\014" +
    "\020\025\021\037\022\042\023\041\061\045\062\035\072" +
    "\047\073\054\100\027\102\034\001\002\000\004\075\272" +
    "\001\002\000\006\014\255\105\256\001\002\000\004\066" +
    "\uff6f\001\002\000\044\004\044\006\043\011\053\012\016" +
    "\013\046\016\040\017\014\020\025\021\037\022\042\023" +
    "\041\061\045\062\035\072\047\073\054\100\027\102\034" +
    "\001\002\000\046\006\043\010\224\011\053\012\016\013" +
    "\046\015\276\016\040\017\014\020\025\021\037\022\042" +
    "\023\041\061\045\062\035\072\047\073\054\100\027\102" +
    "\034\001\002\000\004\075\277\001\002\000\006\014\255" +
    "\105\256\001\002\000\004\066\uff6e\001\002\000\004\005" +
    "\302\001\002\000\004\100\303\001\002\000\004\005\304" +
    "\001\002\000\004\075\305\001\002\000\052\006\uff72\010" +
    "\uff72\011\uff72\012\uff72\013\uff72\015\uff72\016\uff72\017\uff72" +
    "\020\uff72\021\uff72\022\uff72\023\uff72\061\uff72\062\uff72\066" +
    "\uff72\072\uff72\073\uff72\075\uff72\100\uff72\102\uff72\001\002" +
    "\000\012\043\067\046\066\047\064\100\070\001\002\000" +
    "\004\064\310\001\002\000\004\065\311\001\002\000\044" +
    "\004\044\006\043\011\053\012\016\013\046\016\040\017" +
    "\014\020\025\021\037\022\042\023\041\061\045\062\035" +
    "\072\047\073\054\100\027\102\034\001\002\000\046\006" +
    "\043\010\224\011\053\012\016\013\046\016\040\017\014" +
    "\020\025\021\037\022\042\023\041\061\045\062\035\066" +
    "\313\072\047\073\054\100\027\102\034\001\002\000\054" +
    "\006\uffb4\007\314\010\uffb4\011\uffb4\012\uffb4\013\uffb4\015" +
    "\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\061\uffb4\062\uffb4\066\uffb4\072\uffb4\073\uffb4\075\uffb4\100" +
    "\uffb4\102\uffb4\001\002\000\004\065\315\001\002\000\044" +
    "\004\044\006\043\011\053\012\016\013\046\016\040\017" +
    "\014\020\025\021\037\022\042\023\041\061\045\062\035" +
    "\072\047\073\054\100\027\102\034\001\002\000\046\006" +
    "\043\010\224\011\053\012\016\013\046\016\040\017\014" +
    "\020\025\021\037\022\042\023\041\061\045\062\035\066" +
    "\317\072\047\073\054\100\027\102\034\001\002\000\052" +
    "\006\uff84\010\uff84\011\uff84\012\uff84\013\uff84\015\uff84\016" +
    "\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023\uff84\061\uff84" +
    "\062\uff84\066\uff84\072\uff84\073\uff84\075\uff84\100\uff84\102" +
    "\uff84\001\002\000\004\025\321\001\002\000\004\005\322" +
    "\001\002\000\006\005\323\100\324\001\002\000\004\075" +
    "\327\001\002\000\004\005\325\001\002\000\004\075\326" +
    "\001\002\000\052\006\uffd2\010\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\061\uffd2\062\uffd2\066\uffd2\072\uffd2\073\uffd2\075" +
    "\uffd2\100\uffd2\102\uffd2\001\002\000\052\006\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\015\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\061\uffd3\062\uffd3\066\uffd3" +
    "\072\uffd3\073\uffd3\075\uffd3\100\uffd3\102\uffd3\001\002\000" +
    "\006\025\332\075\331\001\002\000\052\006\uffd5\010\uffd5" +
    "\011\uffd5\012\uffd5\013\uffd5\015\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\061\uffd5\062\uffd5\066\uffd5" +
    "\072\uffd5\073\uffd5\075\uffd5\100\uffd5\102\uffd5\001\002\000" +
    "\004\103\333\001\002\000\004\077\334\001\002\000\004" +
    "\103\335\001\002\000\014\026\341\027\340\030\342\031" +
    "\336\075\337\001\002\000\004\103\357\001\002\000\052" +
    "\006\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\061\uffd4" +
    "\062\uffd4\066\uffd4\072\uffd4\073\uffd4\075\uffd4\100\uffd4\102" +
    "\uffd4\001\002\000\004\103\353\001\002\000\004\103\347" +
    "\001\002\000\004\103\343\001\002\000\004\077\344\001" +
    "\002\000\004\103\345\001\002\000\004\075\346\001\002" +
    "\000\052\006\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\061\uffb7\062\uffb7\066\uffb7\072\uffb7\073\uffb7\075\uffb7\100" +
    "\uffb7\102\uffb7\001\002\000\004\077\350\001\002\000\004" +
    "\103\351\001\002\000\004\075\352\001\002\000\052\006" +
    "\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\061\uffb9\062" +
    "\uffb9\066\uffb9\072\uffb9\073\uffb9\075\uffb9\100\uffb9\102\uffb9" +
    "\001\002\000\004\077\354\001\002\000\004\103\355\001" +
    "\002\000\004\075\356\001\002\000\052\006\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\061\uffb8\062\uffb8\066\uffb8" +
    "\072\uffb8\073\uffb8\075\uffb8\100\uffb8\102\uffb8\001\002\000" +
    "\004\077\360\001\002\000\004\103\361\001\002\000\004" +
    "\075\362\001\002\000\052\006\uffb6\010\uffb6\011\uffb6\012" +
    "\uffb6\013\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\061\uffb6\062\uffb6\066\uffb6\072\uffb6\073" +
    "\uffb6\075\uffb6\100\uffb6\102\uffb6\001\002\000\004\025\364" +
    "\001\002\000\004\005\365\001\002\000\006\005\366\100" +
    "\367\001\002\000\004\075\377\001\002\000\004\005\370" +
    "\001\002\000\006\026\372\075\371\001\002\000\052\006" +
    "\uffda\010\uffda\011\uffda\012\uffda\013\uffda\015\uffda\016\uffda" +
    "\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\061\uffda\062" +
    "\uffda\066\uffda\072\uffda\073\uffda\075\uffda\100\uffda\102\uffda" +
    "\001\002\000\004\005\373\001\002\000\004\100\374\001" +
    "\002\000\004\005\375\001\002\000\004\075\376\001\002" +
    "\000\052\006\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\061\uffb5\062\uffb5\066\uffb5\072\uffb5\073\uffb5\075\uffb5\100" +
    "\uffb5\102\uffb5\001\002\000\052\006\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\013\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\061\uffdb\062\uffdb\066\uffdb\072\uffdb" +
    "\073\uffdb\075\uffdb\100\uffdb\102\uffdb\001\002\000\006\025" +
    "\u0102\075\u0101\001\002\000\052\006\uffd7\010\uffd7\011\uffd7" +
    "\012\uffd7\013\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\061\uffd7\062\uffd7\066\uffd7\072\uffd7" +
    "\073\uffd7\075\uffd7\100\uffd7\102\uffd7\001\002\000\004\103" +
    "\u0103\001\002\000\016\026\u0108\027\u0107\030\u0109\031\u0104" +
    "\032\u0106\075\u0105\001\002\000\004\103\u0112\001\002\000" +
    "\052\006\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\061" +
    "\uffd6\062\uffd6\066\uffd6\072\uffd6\073\uffd6\075\uffd6\100\uffd6" +
    "\102\uffd6\001\002\000\004\103\u0110\001\002\000\004\103" +
    "\u010e\001\002\000\004\103\u010c\001\002\000\004\103\u010a" +
    "\001\002\000\004\075\u010b\001\002\000\052\006\uffbc\010" +
    "\uffbc\011\uffbc\012\uffbc\013\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\023\uffbc\061\uffbc\062\uffbc\066" +
    "\uffbc\072\uffbc\073\uffbc\075\uffbc\100\uffbc\102\uffbc\001\002" +
    "\000\004\075\u010d\001\002\000\052\006\uffbe\010\uffbe\011" +
    "\uffbe\012\uffbe\013\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\061\uffbe\062\uffbe\066\uffbe\072" +
    "\uffbe\073\uffbe\075\uffbe\100\uffbe\102\uffbe\001\002\000\004" +
    "\075\u010f\001\002\000\052\006\uffbd\010\uffbd\011\uffbd\012" +
    "\uffbd\013\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\061\uffbd\062\uffbd\066\uffbd\072\uffbd\073" +
    "\uffbd\075\uffbd\100\uffbd\102\uffbd\001\002\000\004\075\u0111" +
    "\001\002\000\052\006\uffba\010\uffba\011\uffba\012\uffba\013" +
    "\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\061\uffba\062\uffba\066\uffba\072\uffba\073\uffba\075" +
    "\uffba\100\uffba\102\uffba\001\002\000\004\075\u0113\001\002" +
    "\000\052\006\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\061\uffbb\062\uffbb\066\uffbb\072\uffbb\073\uffbb\075\uffbb\100" +
    "\uffbb\102\uffbb\001\002\000\004\005\u0115\001\002\000\004" +
    "\100\u0116\001\002\000\004\005\u0117\001\002\000\004\075" +
    "\u0118\001\002\000\052\006\uff71\010\uff71\011\uff71\012\uff71" +
    "\013\uff71\015\uff71\016\uff71\017\uff71\020\uff71\021\uff71\022" +
    "\uff71\023\uff71\061\uff71\062\uff71\066\uff71\072\uff71\073\uff71" +
    "\075\uff71\100\uff71\102\uff71\001\002\000\004\100\u0121\001" +
    "\002\000\006\005\u011b\035\u011c\001\002\000\004\100\u011f" +
    "\001\002\000\004\100\u011d\001\002\000\004\036\u011e\001" +
    "\002\000\052\006\uff73\010\uff73\011\uff73\012\uff73\013\uff73" +
    "\015\uff73\016\uff73\017\uff73\020\uff73\021\uff73\022\uff73\023" +
    "\uff73\061\uff73\062\uff73\066\uff73\072\uff73\073\uff73\075\uff73" +
    "\100\uff73\102\uff73\001\002\000\004\005\u0120\001\002\000" +
    "\052\006\uff74\010\uff74\011\uff74\012\uff74\013\uff74\015\uff74" +
    "\016\uff74\017\uff74\020\uff74\021\uff74\022\uff74\023\uff74\061" +
    "\uff74\062\uff74\066\uff74\072\uff74\073\uff74\075\uff74\100\uff74" +
    "\102\uff74\001\002\000\004\103\u0122\001\002\000\004\075" +
    "\u0123\001\002\000\052\006\uff75\010\uff75\011\uff75\012\uff75" +
    "\013\uff75\015\uff75\016\uff75\017\uff75\020\uff75\021\uff75\022" +
    "\uff75\023\uff75\061\uff75\062\uff75\066\uff75\072\uff75\073\uff75" +
    "\075\uff75\100\uff75\102\uff75\001\002\000\004\002\ufffb\001" +
    "\002\000\004\100\u013d\001\002\000\004\100\u013b\001\002" +
    "\000\004\100\u0139\001\002\000\004\075\u0138\001\002\000" +
    "\004\100\u0136\001\002\000\004\100\u0134\001\002\000\004" +
    "\075\u0133\001\002\000\004\005\u012d\001\002\000\006\005" +
    "\u012e\100\u012f\001\002\000\004\075\u0132\001\002\000\004" +
    "\005\u0130\001\002\000\004\075\u0131\001\002\000\052\006" +
    "\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\061\uffd0\062" +
    "\uffd0\066\uffd0\072\uffd0\073\uffd0\075\uffd0\100\uffd0\102\uffd0" +
    "\001\002\000\052\006\uffd1\010\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\061\uffd1\062\uffd1\066\uffd1\072\uffd1\073\uffd1\075" +
    "\uffd1\100\uffd1\102\uffd1\001\002\000\052\006\uffcd\010\uffcd" +
    "\011\uffcd\012\uffcd\013\uffcd\015\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\061\uffcd\062\uffcd\066\uffcd" +
    "\072\uffcd\073\uffcd\075\uffcd\100\uffcd\102\uffcd\001\002\000" +
    "\004\075\u0135\001\002\000\052\006\uffcc\010\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\061\uffcc\062\uffcc\066\uffcc\072\uffcc" +
    "\073\uffcc\075\uffcc\100\uffcc\102\uffcc\001\002\000\004\075" +
    "\u0137\001\002\000\052\006\uffca\010\uffca\011\uffca\012\uffca" +
    "\013\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\061\uffca\062\uffca\066\uffca\072\uffca\073\uffca" +
    "\075\uffca\100\uffca\102\uffca\001\002\000\052\006\uffce\010" +
    "\uffce\011\uffce\012\uffce\013\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\061\uffce\062\uffce\066" +
    "\uffce\072\uffce\073\uffce\075\uffce\100\uffce\102\uffce\001\002" +
    "\000\004\075\u013a\001\002\000\052\006\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\061\uffc8\062\uffc8\066\uffc8\072" +
    "\uffc8\073\uffc8\075\uffc8\100\uffc8\102\uffc8\001\002\000\004" +
    "\075\u013c\001\002\000\052\006\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb" +
    "\022\uffcb\023\uffcb\061\uffcb\062\uffcb\066\uffcb\072\uffcb\073" +
    "\uffcb\075\uffcb\100\uffcb\102\uffcb\001\002\000\004\075\u013e" +
    "\001\002\000\052\006\uffc9\010\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\061\uffc9\062\uffc9\066\uffc9\072\uffc9\073\uffc9\075" +
    "\uffc9\100\uffc9\102\uffc9\001\002\000\006\025\u0141\075\u0140" +
    "\001\002\000\052\006\uffd9\010\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\061\uffd9\062\uffd9\066\uffd9\072\uffd9\073\uffd9\075" +
    "\uffd9\100\uffd9\102\uffd9\001\002\000\004\103\u0142\001\002" +
    "\000\004\077\u0143\001\002\000\004\103\u0144\001\002\000" +
    "\014\026\u0148\027\u0147\030\u0149\031\u0145\075\u0146\001\002" +
    "\000\004\103\u0156\001\002\000\052\006\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\061\uffd8\062\uffd8\066\uffd8\072" +
    "\uffd8\073\uffd8\075\uffd8\100\uffd8\102\uffd8\001\002\000\004" +
    "\103\u0152\001\002\000\004\103\u014e\001\002\000\004\103" +
    "\u014a\001\002\000\004\077\u014b\001\002\000\004\103\u014c" +
    "\001\002\000\004\075\u014d\001\002\000\052\006\uffc0\010" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\061\uffc0\062\uffc0\066" +
    "\uffc0\072\uffc0\073\uffc0\075\uffc0\100\uffc0\102\uffc0\001\002" +
    "\000\004\077\u014f\001\002\000\004\103\u0150\001\002\000" +
    "\004\075\u0151\001\002\000\052\006\uffc2\010\uffc2\011\uffc2" +
    "\012\uffc2\013\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\061\uffc2\062\uffc2\066\uffc2\072\uffc2" +
    "\073\uffc2\075\uffc2\100\uffc2\102\uffc2\001\002\000\004\077" +
    "\u0153\001\002\000\004\103\u0154\001\002\000\004\075\u0155" +
    "\001\002\000\052\006\uffc1\010\uffc1\011\uffc1\012\uffc1\013" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\061\uffc1\062\uffc1\066\uffc1\072\uffc1\073\uffc1\075" +
    "\uffc1\100\uffc1\102\uffc1\001\002\000\004\077\u0157\001\002" +
    "\000\004\103\u0158\001\002\000\004\075\u0159\001\002\000" +
    "\052\006\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\015\uffbf" +
    "\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\061" +
    "\uffbf\062\uffbf\066\uffbf\072\uffbf\073\uffbf\075\uffbf\100\uffbf" +
    "\102\uffbf\001\002\000\004\004\u015b\001\002\000\004\002" +
    "\ufffe\001\002\000\006\017\u015e\100\u015f\001\002\000\004" +
    "\064\u017a\001\002\000\004\100\u0173\001\002\000\004\025" +
    "\u0160\001\002\000\004\103\u0161\001\002\000\004\075\u0162" +
    "\001\002\000\012\043\067\046\066\047\064\100\070\001" +
    "\002\000\004\075\u0164\001\002\000\010\050\u0166\051\u0168" +
    "\100\u0167\001\002\000\004\064\uff7f\001\002\000\004\100" +
    "\u0172\001\002\000\010\025\u016b\050\u016a\051\u016c\001\002" +
    "\000\004\100\u0169\001\002\000\004\064\uff79\001\002\000" +
    "\004\064\uff7c\001\002\000\004\103\u016d\001\002\000\004" +
    "\064\uff7b\001\002\000\006\026\u016f\027\u016e\001\002\000" +
    "\004\103\u0171\001\002\000\004\103\u0170\001\002\000\004" +
    "\064\uff7e\001\002\000\004\064\uff7d\001\002\000\004\064" +
    "\uff7a\001\002\000\004\025\u0174\001\002\000\004\103\u0175" +
    "\001\002\000\004\075\u0176\001\002\000\012\043\067\046" +
    "\066\047\064\100\070\001\002\000\004\075\u0178\001\002" +
    "\000\010\050\u0166\051\u0168\100\u0167\001\002\000\004\064" +
    "\uff80\001\002\000\004\065\u017b\001\002\000\044\004\044" +
    "\006\043\011\053\012\016\013\046\016\040\017\014\020" +
    "\025\021\037\022\042\023\041\061\045\062\035\072\047" +
    "\073\054\100\027\102\034\001\002\000\046\006\043\010" +
    "\224\011\053\012\016\013\046\016\040\017\014\020\025" +
    "\021\037\022\042\023\041\061\045\062\035\066\u017d\072" +
    "\047\073\054\100\027\102\034\001\002\000\052\006\uff81" +
    "\010\uff81\011\uff81\012\uff81\013\uff81\015\uff81\016\uff81\017" +
    "\uff81\020\uff81\021\uff81\022\uff81\023\uff81\061\uff81\062\uff81" +
    "\066\uff81\072\uff81\073\uff81\075\uff81\100\uff81\102\uff81\001" +
    "\002\000\006\025\u0180\075\u017f\001\002\000\052\006\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\061\uffdd\062\uffdd" +
    "\066\uffdd\072\uffdd\073\uffdd\075\uffdd\100\uffdd\102\uffdd\001" +
    "\002\000\004\103\u0181\001\002\000\016\026\u0186\027\u0185" +
    "\030\u0187\031\u0182\032\u0184\075\u0183\001\002\000\004\103" +
    "\u0190\001\002\000\052\006\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\061\uffdc\062\uffdc\066\uffdc\072\uffdc\073\uffdc" +
    "\075\uffdc\100\uffdc\102\uffdc\001\002\000\004\103\u018e\001" +
    "\002\000\004\103\u018c\001\002\000\004\103\u018a\001\002" +
    "\000\004\103\u0188\001\002\000\004\075\u0189\001\002\000" +
    "\052\006\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\015\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\061" +
    "\uffc5\062\uffc5\066\uffc5\072\uffc5\073\uffc5\075\uffc5\100\uffc5" +
    "\102\uffc5\001\002\000\004\075\u018b\001\002\000\052\006" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\061\uffc7\062" +
    "\uffc7\066\uffc7\072\uffc7\073\uffc7\075\uffc7\100\uffc7\102\uffc7" +
    "\001\002\000\004\075\u018d\001\002\000\052\006\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\061\uffc6\062\uffc6\066" +
    "\uffc6\072\uffc6\073\uffc6\075\uffc6\100\uffc6\102\uffc6\001\002" +
    "\000\004\075\u018f\001\002\000\052\006\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\061\uffc3\062\uffc3\066\uffc3\072" +
    "\uffc3\073\uffc3\075\uffc3\100\uffc3\102\uffc3\001\002\000\004" +
    "\075\u0191\001\002\000\052\006\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\061\uffc4\062\uffc4\066\uffc4\072\uffc4\073" +
    "\uffc4\075\uffc4\100\uffc4\102\uffc4\001\002\000\004\063\u0193" +
    "\001\002\000\004\064\u0194\001\002\000\004\065\u0195\001" +
    "\002\000\046\004\044\006\043\011\053\012\016\013\046" +
    "\016\040\017\014\020\025\021\037\022\042\023\041\061" +
    "\045\062\035\066\u0197\072\047\073\054\100\027\102\034" +
    "\001\002\000\046\006\043\010\224\011\053\012\016\013" +
    "\046\016\040\017\014\020\025\021\037\022\042\023\041" +
    "\061\045\062\035\066\u0199\072\047\073\054\100\027\102" +
    "\034\001\002\000\004\004\u0198\001\002\000\004\002\ufffc" +
    "\001\002\000\004\004\u019a\001\002\000\004\002\uffff\001" +
    "\002\000\004\063\u019c\001\002\000\004\064\u019d\001\002" +
    "\000\004\065\u019e\001\002\000\046\004\044\006\043\011" +
    "\053\012\016\013\046\016\040\017\014\020\025\021\037" +
    "\022\042\023\041\061\045\062\035\066\u01a0\072\047\073" +
    "\054\100\027\102\034\001\002\000\046\006\043\010\224" +
    "\011\053\012\016\013\046\016\040\017\014\020\025\021" +
    "\037\022\042\023\041\061\045\062\035\066\u01a2\072\047" +
    "\073\054\100\027\102\034\001\002\000\004\004\u01a1\001" +
    "\002\000\004\002\ufffd\001\002\000\004\004\u01a3\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a1\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\023\004\021\005\027\006\032\007\054\010\017\012\051" +
    "\014\035\015\016\016\031\017\020\020\014\021\025\022" +
    "\022\023\050\024\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\213\005\215\006\220\010\210\011\222\012" +
    "\225\014\221\015\207\016\216\017\211\020\206\021\214" +
    "\022\212\023\224\024\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\205\004\021\005\027\006\032" +
    "\007\054\010\017\012\051\014\035\015\016\016\031\017" +
    "\020\020\014\021\025\022\022\023\050\024\047\001\001" +
    "\000\040\004\213\005\215\006\220\010\210\011\222\012" +
    "\225\014\221\015\207\016\216\017\211\020\206\021\214" +
    "\022\212\023\224\024\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\227" +
    "\004\021\005\027\006\032\007\054\010\017\012\051\014" +
    "\035\015\016\016\031\017\020\020\014\021\025\022\022" +
    "\023\050\024\047\001\001\000\040\004\213\005\215\006" +
    "\220\010\210\011\222\012\225\014\221\015\207\016\216" +
    "\017\211\020\206\021\214\022\212\023\224\024\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\257\025\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\262\004\021\005\027\006\032" +
    "\007\054\010\017\012\051\014\035\015\016\016\031\017" +
    "\020\020\014\021\025\022\022\023\050\024\047\001\001" +
    "\000\040\004\213\005\215\006\220\010\210\011\222\012" +
    "\225\014\221\015\207\016\216\017\211\020\206\021\214" +
    "\022\212\023\224\024\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\267\004\021" +
    "\005\027\006\032\007\054\010\017\012\051\014\035\015" +
    "\016\016\031\017\020\020\014\021\025\022\022\023\050" +
    "\024\047\001\001\000\040\004\213\005\215\006\220\010" +
    "\210\011\222\012\225\014\221\015\207\016\216\017\211" +
    "\020\206\021\214\022\212\023\224\024\047\001\001\000" +
    "\002\001\001\000\006\007\257\025\272\001\001\000\002" +
    "\001\001\000\042\003\274\004\021\005\027\006\032\007" +
    "\054\010\017\012\051\014\035\015\016\016\031\017\020" +
    "\020\014\021\025\022\022\023\050\024\047\001\001\000" +
    "\040\004\213\005\215\006\220\010\210\011\222\012\225" +
    "\014\221\015\207\016\216\017\211\020\206\021\214\022" +
    "\212\023\224\024\047\001\001\000\002\001\001\000\006" +
    "\007\257\025\277\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\306\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\311\004\021\005\027" +
    "\006\032\007\054\010\017\012\051\014\035\015\016\016" +
    "\031\017\020\020\014\021\025\022\022\023\050\024\047" +
    "\001\001\000\040\004\213\005\215\006\220\010\210\011" +
    "\222\012\225\014\221\015\207\016\216\017\211\020\206" +
    "\021\214\022\212\023\224\024\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\315\004\021\005\027" +
    "\006\032\007\054\010\017\012\051\014\035\015\016\016" +
    "\031\017\020\020\014\021\025\022\022\023\050\024\047" +
    "\001\001\000\040\004\213\005\215\006\220\010\210\011" +
    "\222\012\225\014\221\015\207\016\216\017\211\020\206" +
    "\021\214\022\212\023\224\024\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\u015c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u0162\001\001\000\002\001\001\000" +
    "\004\027\u0164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u0176\001" +
    "\001\000\002\001\001\000\004\027\u0178\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\u017b\004\021\005" +
    "\027\006\032\007\054\010\017\012\051\014\035\015\016" +
    "\016\031\017\020\020\014\021\025\022\022\023\050\024" +
    "\047\001\001\000\040\004\213\005\215\006\220\010\210" +
    "\011\222\012\225\014\221\015\207\016\216\017\211\020" +
    "\206\021\214\022\212\023\224\024\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\u0195\004\021\005\027\006\032" +
    "\007\054\010\017\012\051\014\035\015\016\016\031\017" +
    "\020\020\014\021\025\022\022\023\050\024\047\001\001" +
    "\000\040\004\213\005\215\006\220\010\210\011\222\012" +
    "\225\014\221\015\207\016\216\017\211\020\206\021\214" +
    "\022\212\023\224\024\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\u019e\004\021\005\027\006\032\007\054\010\017\012\051" +
    "\014\035\015\016\016\031\017\020\020\014\021\025\022" +
    "\022\023\050\024\047\001\001\000\040\004\213\005\215" +
    "\006\220\010\210\011\222\012\225\014\221\015\207\016" +
    "\216\017\211\020\206\021\214\022\212\023\224\024\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CASE ::= VACIO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CASE ::= Default DPuntos SENTENCIA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CASE ::= Case Numero DPuntos SENTENCIA Break P_coma CASE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CASE ::= Case Identificador DPuntos SENTENCIA Break P_coma CASE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CIN ::= Cin Op_desDer Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // COUT ::= Cout Op_desIzq Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // INCLUDE ::= Numeral Include Op_menor Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // INCLUDE ::= Numeral Include Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DEFINE ::= Numeral Define Identificador Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFINE",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SCANF ::= Scanf Parent_a Comillas Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PRINTF ::= Printf Parent_a Comillas Comillas Coma Identificador Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PRINTF ::= Printf Parent_a Comillas Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DECLARACION_FOR ::= Op_decremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DECLARACION_FOR ::= Identificador Op_decremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DECLARACION_FOR ::= Identificador Igual Numero Resta Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DECLARACION_FOR ::= Identificador Igual Numero Suma Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTENCIA_FOR ::= T_int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIA_BOOLEANA ::= Identificador Op_menorE Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA_BOOLEANA ::= Identificador Op_menorE Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA_BOOLEANA ::= Identificador Op_menorE Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA_BOOLEANA ::= Identificador Op_menorE Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA_BOOLEANA ::= Identificador Op_mayorE Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIA_BOOLEANA ::= Identificador Op_mayorE Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIA_BOOLEANA ::= Identificador Op_mayorE Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCIA_BOOLEANA ::= Identificador Op_mayorE Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA_BOOLEANA ::= Identificador Op_orB Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA_BOOLEANA ::= Identificador Op_orB Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA_BOOLEANA ::= Identificador Op_orB Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_BOOLEANA ::= Identificador Op_orB Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA_BOOLEANA ::= Identificador Op_and Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA_BOOLEANA ::= Identificador Op_and Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA_BOOLEANA ::= Identificador Op_and Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA_BOOLEANA ::= Identificador Op_and Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA_BOOLEANA ::= Identificador Op_menor Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA_BOOLEANA ::= Identificador Op_menor Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA_BOOLEANA ::= Identificador Op_menor Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA_BOOLEANA ::= Identificador Op_menor Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA_BOOLEANA ::= Identificador Op_mayor Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA_BOOLEANA ::= Identificador Op_mayor Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA_BOOLEANA ::= Identificador Op_mayor Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA_BOOLEANA ::= Identificador Op_mayor Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA_BOOLEANA ::= Identificador Op_andB Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_BOOLEANA ::= Identificador Op_andB Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA_BOOLEANA ::= Identificador Op_andB Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_BOOLEANA ::= Identificador Op_andB Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_BOOLEANA ::= Identificador Op_or Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_BOOLEANA ::= Identificador Op_or Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_BOOLEANA ::= Identificador Op_or Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_BOOLEANA ::= Identificador Op_or Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA_BOOLEANA ::= Identificador Op_diferente Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_BOOLEANA ::= Identificador Op_diferente Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_BOOLEANA ::= Identificador Op_diferente Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_BOOLEANA ::= Identificador Op_diferente Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_BOOLEANA ::= Identificador Op_diferente Op_boolFalse 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_BOOLEANA ::= Identificador Op_diferente Op_boolTrue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_BOOLEANA ::= Identificador Op_igual Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_BOOLEANA ::= Identificador Op_igual Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_BOOLEANA ::= Identificador Op_igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_BOOLEANA ::= Identificador Op_igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_BOOLEANA ::= Identificador Op_igual Op_boolFalse 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_BOOLEANA ::= Identificador Op_igual Op_boolTrue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_BOOLEANA ::= Op_not Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_BOOLEANA ::= Op_boolFalse 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_BOOLEANA ::= Op_boolTrue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION_ARITMETICA ::= Cadena Identificador Igual Comillas Identificador Comillas Suma Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION_ARITMETICA ::= T_float Identificador Igual Numero Punto Numero Division Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION_ARITMETICA ::= T_float Identificador Igual Numero Punto Numero Multiplicacion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION_ARITMETICA ::= T_float Identificador Igual Numero Punto Numero Resta Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION_ARITMETICA ::= T_float Identificador Igual Numero Punto Numero Suma Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION_ARITMETICA ::= T_long Identificador Igual Numero Resto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION_ARITMETICA ::= T_long Identificador Igual Numero Division Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION_ARITMETICA ::= T_long Identificador Igual Numero Multiplicacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_ARITMETICA ::= T_long Identificador Igual Numero Resta Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION_ARITMETICA ::= T_long Identificador Igual Numero Suma Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION_ARITMETICA ::= T_double Identificador Igual Numero Punto Numero Division Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION_ARITMETICA ::= T_double Identificador Igual Numero Punto Numero Multiplicacion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION_ARITMETICA ::= T_double Identificador Igual Numero Punto Numero Resta Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION_ARITMETICA ::= T_double Identificador Igual Numero Punto Numero Suma Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION_ARITMETICA ::= T_int Identificador Igual Numero Resto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION_ARITMETICA ::= T_int Identificador Igual Numero Division Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION_ARITMETICA ::= T_int Identificador Igual Numero Multiplicacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION_ARITMETICA ::= T_int Identificador Igual Numero Resta Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_ARITMETICA ::= T_int Identificador Igual Numero Suma Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_ARITMETICA ::= Identificador Op_asigResto Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_ARITMETICA ::= Identificador Op_asigSuma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_ARITMETICA ::= Identificador Op_asigMult Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_ARITMETICA ::= Identificador Op_asigDiv Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_ARITMETICA ::= Identificador Op_asigResta Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_ARITMETICA ::= Identificador Op_decremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_ARITMETICA ::= Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= DECLARACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= T_char Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= T_char Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= T_float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= T_float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= T_long Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= T_long Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= T_double Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= T_double Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= T_int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= T_int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= Linea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= VACIO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= INCLUDE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA INCLUDE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= DEFINE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA DEFINE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Main Parent_a Parent_c Llave_a Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Void Main Parent_a Parent_c Llave_a Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= T_int Main Parent_a Parent_c Llave_a Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Void Main Parent_a Parent_c Llave_a SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= T_int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

